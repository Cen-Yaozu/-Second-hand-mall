{"remainingRequest":"D:\\Desktop\\-Second-hand-mall\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Desktop\\-Second-hand-mall\\node_modules\\element-ui\\packages\\upload\\src\\upload-dragger.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\element-ui\\packages\\upload\\src\\upload-dragger.vue","mtime":1741229038771},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741229036518},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\babel-loader\\lib\\index.js","mtime":1741229036772},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741229036518},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\vue-loader\\lib\\index.js","mtime":1741229036465}],"contextDependencies":[],"result":["\n  export default {\n    name: 'ElUploadDrag',\n    props: {\n      disabled: Boolean\n    },\n    inject: {\n      uploader: {\n        default: ''\n      }\n    },\n    data() {\n      return {\n        dragover: false\n      };\n    },\n    methods: {\n      onDragover() {\n        if (!this.disabled) {\n          this.dragover = true;\n        }\n      },\n      onDrop(e) {\n        if (this.disabled || !this.uploader) return;\n        const accept = this.uploader.accept;\n        this.dragover = false;\n        if (!accept) {\n          this.$emit('file', e.dataTransfer.files);\n          return;\n        }\n        this.$emit('file', [].slice.call(e.dataTransfer.files).filter(file => {\n          const { type, name } = file;\n          const extension = name.indexOf('.') > -1\n            ? `.${ name.split('.').pop() }`\n            : '';\n          const baseType = type.replace(/\\/.*$/, '');\n          return accept.split(',')\n            .map(type => type.trim())\n            .filter(type => type)\n            .some(acceptedType => {\n              if (/\\..+$/.test(acceptedType)) {\n                return extension === acceptedType;\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '');\n              }\n              if (/^[^\\/]+\\/[^\\/]+$/.test(acceptedType)) {\n                return type === acceptedType;\n              }\n              return false;\n            });\n        }));\n      }\n    }\n  };\n",{"version":3,"sources":["upload-dragger.vue"],"names":[],"mappings":";AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"upload-dragger.vue","sourceRoot":"node_modules/element-ui/packages/upload/src","sourcesContent":["<template>\n  <div\n    class=\"el-upload-dragger\"\n    :class=\"{\n      'is-dragover': dragover\n    }\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'ElUploadDrag',\n    props: {\n      disabled: Boolean\n    },\n    inject: {\n      uploader: {\n        default: ''\n      }\n    },\n    data() {\n      return {\n        dragover: false\n      };\n    },\n    methods: {\n      onDragover() {\n        if (!this.disabled) {\n          this.dragover = true;\n        }\n      },\n      onDrop(e) {\n        if (this.disabled || !this.uploader) return;\n        const accept = this.uploader.accept;\n        this.dragover = false;\n        if (!accept) {\n          this.$emit('file', e.dataTransfer.files);\n          return;\n        }\n        this.$emit('file', [].slice.call(e.dataTransfer.files).filter(file => {\n          const { type, name } = file;\n          const extension = name.indexOf('.') > -1\n            ? `.${ name.split('.').pop() }`\n            : '';\n          const baseType = type.replace(/\\/.*$/, '');\n          return accept.split(',')\n            .map(type => type.trim())\n            .filter(type => type)\n            .some(acceptedType => {\n              if (/\\..+$/.test(acceptedType)) {\n                return extension === acceptedType;\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '');\n              }\n              if (/^[^\\/]+\\/[^\\/]+$/.test(acceptedType)) {\n                return type === acceptedType;\n              }\n              return false;\n            });\n        }));\n      }\n    }\n  };\n</script>\n\n"]}]}