{"remainingRequest":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/-Second-hand-mall/src/components/page/idle-details.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/macos/Desktop/-Second-hand-mall/src/components/page/idle-details.vue","mtime":1742023978617},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js","mtime":1741743640250},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js","mtime":1741743643788}],"contextDependencies":[],"result":["\n    import AppHead from '../common/AppHeader.vue';\n    import AppBody from '../common/AppPageBody.vue'\n    import AppFoot from '../common/AppFoot.vue'\n    import ReportForm from '../common/ReportForm.vue';\n\n    export default {\n        name: \"idle-details\",\n        components: {\n            AppHead,\n            AppBody,\n            AppFoot,\n            ReportForm\n        },\n        data() {\n            return {\n                buttonText:'编辑',\n                isEditing:false,\n                messageContent:'',\n                toUser:null,\n                toMessage:null,\n                isReply:false,\n                replyData:{\n                    toUserNickname:'',\n                    toMessage:''\n                },\n                messageList:[],\n                idleItemInfo:{\n                    id:'',\n                    idleName:'',\n                    idleDetails:'',\n                    pictureList:[],\n                    idlePrice:0,\n                    idlePlace:'',\n                    idleLabel:'',\n                    idleStatus:-1,\n                    userId:'',\n                    user:{\n                        avatar:'',\n                        nickname:'',\n                        signInTime:''\n                    },\n                },\n                editingIdleItem:null,\n                isMaster:false,\n                isFavorite:true,\n                favoriteId:0,\n                imageLoading: true,\n                loadedImages: 0,\n                totalImages: 0,\n                exchangeDialogVisible: false,\n                exchangeForm: {\n                    requestItemId: '',\n                    offerItemId: '',\n                    itemOwnerId: '',\n                    exchangeReason: ''\n                },\n                exchangeRules: {\n                    offerItemId: [\n                        { required: true, message: '请选择您提供交换的物品', trigger: 'change' }\n                    ],\n                    exchangeReason: [\n                        { required: true, message: '请输入交换理由', trigger: 'blur' },\n                        { min: 5, max: 200, message: '长度在 5 到 200 个字符', trigger: 'blur' }\n                    ]\n                },\n                submitLoading: false,\n                myItems: [],\n                selectedMyItem: null,\n                exchangeRequestsDialogVisible: false,\n                activeRequestTab: 'received',\n                receivedRequests: [],\n                sentRequests: [],\n                requestsLoading: false,\n                // 捐赠相关数据\n                donationDialogVisible: false,\n                donationForm: {\n                    itemId: '',\n                    donationType: 0,\n                    donationReason: ''\n                },\n                donationRules: {\n                    donationType: [\n                        { required: true, message: '请选择捐赠类型', trigger: 'change' }\n                    ],\n                    donationReason: [\n                        { required: true, message: '请输入捐赠理由', trigger: 'blur' },\n                        { min: 5, max: 200, message: '长度在 5 到 200 个字符', trigger: 'blur' }\n                    ]\n                },\n                reportDialogVisible: false\n            };\n        },\n        computed: {\n            processedPictureList() {\n                if (!this.idleItemInfo.pictureList) return [];\n                if (typeof this.idleItemInfo.pictureList === 'string') {\n                    try {\n                        return JSON.parse(this.idleItemInfo.pictureList);\n                    } catch (e) {\n                        console.error('解析图片列表失败:', e);\n                        return [];\n                    }\n                }\n                return Array.isArray(this.idleItemInfo.pictureList) \n                    ? this.idleItemInfo.pictureList \n                    : [this.idleItemInfo.pictureList];\n            },\n            fileList() {\n                return this.processedPictureList.map(img => ({\n                    name: img,\n                    url: this.getImageUrl(img)\n                }));\n            },\n            selectedMyItem() {\n                return this.myItems.find(item => item.id === this.exchangeForm.offerItemId);\n            }\n        },\n        created(){\n            this.getMyIdleById();\n        },\n        methods: {\n            getMyIdleById(){\n                this.imageLoading = true;\n                let id = this.$route.query.id;\n                this.$api.getIdleItem({\n                    id: id\n                }).then(res => {\n                    console.log('商品详情原始数据:', res);\n                    if (res.data) {\n                        // 处理商品详情的换行\n                        let list = res.data.idleDetails.split(/\\r?\\n/);\n                        let str = '';\n                        for (let i = 0; i < list.length; i++) {\n                            str += list[i];\n                        }\n                        res.data.idleDetails = str;\n\n                        // 处理图片列表\n                        try {\n                            if (typeof res.data.pictureList === 'string') {\n                                const pictureList = JSON.parse(res.data.pictureList);\n                                res.data.pictureList = Array.isArray(pictureList) ? pictureList : [pictureList];\n                            }\n                            console.log('处理后的图片列表:', res.data.pictureList);\n                        } catch (e) {\n                            console.error('解析图片列表失败:', e);\n                            res.data.pictureList = [];\n                        }\n\n                        this.idleItemInfo = res.data;\n                        this.totalImages = this.processedPictureList.length;\n                        this.loadedImages = 0;\n\n                        // 预加载图片\n                        this.processedPictureList.forEach(imgUrl => {\n                            const img = new Image();\n                            img.onload = () => {\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.onerror = (e) => {\n                                console.error('图片预加载失败:', imgUrl, e);\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.src = this.getImageUrl(imgUrl);\n                        });\n\n                        let userId = this.getCookie('shUserId');\n                        if (userId == this.idleItemInfo.userId) {\n                            this.isMaster = true;\n                        }\n                        this.checkFavorite();\n                        this.checkMyIdle();\n                        this.getAllIdleMessage();\n                    }\n                }).catch(error => {\n                    console.error('获取商品详情失败:', error);\n                    this.$message.error('获取商品详情失败，请重试');\n                    this.imageLoading = false;\n                });\n            },\n            saveChanges(idleItemInfo) {\n                const updatedInfo = {\n                    ...idleItemInfo,\n                    pictureList: JSON.stringify(this.idleItemInfo.pictureList),\n                };\n                // 这里添加调用API更新商品信息的逻辑\n                this.$api.updateIdleItem(updatedInfo).then(() => {\n                    // this.getMyIdleById();\n                    this.$message.success('商品信息更新成功');\n                    this.isEditing = false; // 保存后关闭编辑模式\n                    this.buttonText = '编辑商品'\n                }).catch(() => {\n                    this.$message.error('更新失败，请重试');\n                });\n            },\n            imgChange(file, fileList){\n                this.noneBtnImg = fileList.length >= this.limitCountImg;\n            },\n            fileHandleRemove(file,fileList) {\n                console.log(file, fileList);\n                // 修改：现在需要找到对应的本地路径\n                const urlToRemove = file.localPath || file.url; \n                // 在pictureList中查找对应项\n                const index = this.idleItemInfo.pictureList.indexOf(urlToRemove);\n                console.log(this)\n\n                if (index > -1) {\n                    // 找到了匹配的项，从idleItemInfo.pictureList中移除\n                    this.idleItemInfo.pictureList.splice(index, 1);\n                    this.$forceUpdate();\n                } else {\n                    console.warn('Path not found in the list to remove.');\n                }\n            },\n            fileHandlePreview(file) {\n                console.log(file);\n                // 修改：如果response.data是对象，则使用accessUrl\n                if(file.response && file.response.data) {\n                    const fileData = file.response.data;\n                    this.dialogImageUrl = fileData.accessUrl || fileData;\n                } else {\n                    this.dialogImageUrl = file.url;\n                }\n                this.imgDialogVisible=true;\n            },\n            fileHandleSuccess(response, file, fileList) {\n                console.log(\"file:\", response, file, fileList);\n                // 修改：现在response.data是一个包含localPath和accessUrl的对象\n                const fileData = response.data;\n                // 将本地路径添加到pictureList\n                this.idleItemInfo.pictureList.push(fileData.localPath);\n                // 但在界面展示时使用accessUrl\n                file.url = fileData.accessUrl;\n                file.localPath = fileData.localPath; // 保存本地路径便于后续操作\n            },\n            editButton(){\n                this.isEditing = !this.isEditing;\n                this.buttonText = '保存修改'\n            },\n            getAllIdleMessage(){\n                this.$api.getAllIdleMessage({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    console.log('getAllIdleMessage',res.data);\n                    if(res.status_code===1){\n                        this.messageList=res.data;\n                    }\n                }).catch(()=>{\n                })\n            },\n            checkFavorite(){\n                this.$api.checkFavorite({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if(!res.data){\n                        this.isFavorite=false;\n                    }else {\n                        this.favoriteId=res.data;\n                    }\n                })\n            },\n            checkMyIdle(){\n                this.$api.checkMyIdle({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if (res.data){\n                        this.isMaster = true;\n                    }else {\n                        this.isMaster = false;\n                    }\n                })\n            },\n            getCookie(cname){\n                var name = cname + \"=\";\n                var ca = document.cookie.split(';');\n                for(var i=0; i<ca.length; i++)\n                {\n                    var c = ca[i].trim();\n                    if (c.indexOf(name)===0) return c.substring(name.length,c.length);\n                }\n                return \"\";\n            },\n            replyMessage(index){\n                $('html,body').animate({\n                    scrollTop: $(\"#replyMessageLocation\").offset().top-600\n                }, {duration: 500, easing: \"swing\"});\n                this.isReply=true;\n                this.replyData.toUserNickname=this.messageList[index].fromU.nickname;\n                this.replyData.toMessage=this.messageList[index].content.substring(0,10)+(this.messageList[index].content.length>10?'...':'');\n                this.toUser=this.messageList[index].userId;\n                this.toMessage=this.messageList[index].id;\n            },\n            changeStatus(idle,status){\n                this.$api.updateIdleItem({\n                    id:idle.id,\n                    idleStatus:status\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.idleItemInfo.idleStatus=status;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                });\n            },\n            buyButton(idleItemInfo){\n                this.$api.addOrder({\n                    idleId:idleItemInfo.id,\n                    orderPrice:idleItemInfo.idlePrice,\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.$router.push({path: '/order', query: {id: res.data.id}});\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e=>{\n\n                })\n            },\n            favoriteButton(idleItemInfo){\n                if(this.isFavorite){\n                    this.$api.deleteFavorite({\n                        id: this.favoriteId\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已取消收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=false;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }else {\n                    this.$api.addFavorite({\n                        idleId:idleItemInfo.id\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已加入收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=true;\n                            this.favoriteId=res.data;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }\n            },\n            cancelReply(){\n                this.isReply=false;\n                this.toUser=this.idleItemInfo.userId;\n                this.toMessage=null;\n                this.replyData.toUserNickname='';\n                this.replyData.toMessage='';\n            },\n\n            sendMessage(){\n                let content=this.messageContent.trim();\n                if(this.toUser==null){\n                    this.toUser=this.idleItemInfo.userId;\n                }\n                if(content){\n                    let contentList=content.split(/\\r?\\n/);\n                    let contenHtml=contentList[0];\n                    for(let i=1;i<contentList.length;i++){\n                        contenHtml+='<br>'+contentList[i];\n                    }\n                    this.$api.sendMessage({\n                        idleId:this.idleItemInfo.id,\n                        content:contenHtml,\n                        toUser:this.toUser,\n                        toMessage:this.toMessage\n                    }).then(res=>{\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '留言成功！',\n                                type: 'success'\n                            });\n                            this.messageContent='';\n                            this.cancelReply();\n                            this.getAllIdleMessage();\n                        }else {\n                            this.$message.error(\"留言失败！\"+res.msg);\n                        }\n                    }).catch(()=>{\n                        this.$message.error(\"留言失败！\");\n                    });\n\n                }else{\n                    this.$message.error(\"留言为空！\");\n                }\n            },\n            getImageUrl(url) {\n                // 检查url是否已经是HTTP URL\n                if (url && (url.startsWith('http://') || url.startsWith('https://'))) {\n                    return url;\n                }\n                \n                // 检查url是否是一个本地文件路径\n                if (url && (url.startsWith('/') || url.startsWith('D:') || url.includes('\\\\') || url.includes('/'))) {\n                    // 如果是本地路径，则转换为服务器URL\n                    // 这里假设文件名是路径最后的部分\n                    const fileName = url.split(/[/\\\\]/).pop();\n                    // 构建访问URL\n                    return `http://localhost:8082/image?imageName=${fileName}`;\n                }\n                \n                // 如果是简单的文件名，直接构建访问URL\n                if (url && url.trim() !== '') {\n                    return `http://localhost:8082/image?imageName=${url}`;\n                }\n                \n                // 其他情况直接返回\n                return url;\n            },\n            handleImageLoad() {\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            handleImageError(e) {\n                console.error('图片加载失败:', e);\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            beforeUpload(file) {\n                const isImage = file.type.startsWith('image/');\n                const isLt2M = file.size / 1024 / 1024 < 2;\n\n                if (!isImage) {\n                    this.$message.error('只能上传图片文件!');\n                    return false;\n                }\n                if (!isLt2M) {\n                    this.$message.error('图片大小不能超过 2MB!');\n                    return false;\n                }\n                return true;\n            },\n            exchangeButton(idleItemInfo) {\n                // 设置表单初始值\n                this.exchangeForm.requestItemId = idleItemInfo.id;\n                this.exchangeForm.itemOwnerId = idleItemInfo.userId;\n                \n                // 加载我的可交换物品\n                this.loadMyItems();\n                \n                // 显示对话框\n                this.exchangeDialogVisible = true;\n            },\n            loadMyItems() {\n                this.$api.checkMyIdle().then(res => {\n                    if (res.data) {\n                        // 过滤出在售状态的物品\n                        this.myItems = res.data.filter(item => item.idleStatus === 1);\n                    }\n                }).catch(err => {\n                    console.error('获取我的物品失败', err);\n                    this.$message.error('获取我的物品失败');\n                });\n            },\n            submitExchangeRequest() {\n                this.$refs.exchangeForm.validate((valid) => {\n                    if (valid) {\n                        this.submitLoading = true;\n                        this.$api.createExchangeRequest({\n                            requestItemId: this.exchangeForm.requestItemId,\n                            offerItemId: this.exchangeForm.offerItemId,\n                            itemOwnerId: this.exchangeForm.itemOwnerId,\n                            exchangeReason: this.exchangeForm.exchangeReason\n                        }).then(res => {\n                            if (res.status_code === 1) {\n                                this.$message.success('交换请求已发送');\n                                this.exchangeDialogVisible = false;\n                                \n                                // 清空表单\n                                this.exchangeForm.offerItemId = '';\n                                this.exchangeForm.exchangeReason = '';\n                            } else {\n                                this.$message.error(res.msg || '发送交换请求失败');\n                            }\n                        }).catch(err => {\n                            console.error('发送交换请求失败', err);\n                            this.$message.error('发送交换请求失败');\n                        }).finally(() => {\n                            this.submitLoading = false;\n                        });\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            viewReceivedRequests() {\n                this.exchangeRequestsDialogVisible = true;\n                this.loadExchangeRequests();\n            },\n            loadExchangeRequests() {\n                this.requestsLoading = true;\n                \n                // 加载收到的请求\n                this.$api.getReceivedExchangeRequests().then(res => {\n                    if (res.data) {\n                        this.receivedRequests = res.data;\n                    } else {\n                        this.receivedRequests = [];\n                    }\n                }).catch(err => {\n                    console.error('获取收到的交换请求失败', err);\n                    this.$message.error('获取收到的交换请求失败');\n                });\n                \n                // 加载发送的请求\n                this.$api.getMyExchangeRequests().then(res => {\n                    if (res.data) {\n                        this.sentRequests = res.data;\n                    } else {\n                        this.sentRequests = [];\n                    }\n                }).catch(err => {\n                    console.error('获取发送的交换请求失败', err);\n                    this.$message.error('获取发送的交换请求失败');\n                }).finally(() => {\n                    this.requestsLoading = false;\n                });\n            },\n            getStatusTag(status) {\n                const statusMap = {\n                    0: { type: 'info', text: '等待审核' },\n                    1: { type: 'success', text: '已接受' },\n                    2: { type: 'danger', text: '已拒绝' },\n                    3: { type: 'primary', text: '已完成' }\n                };\n                return statusMap[status] || { type: 'info', text: '未知状态' };\n            },\n            acceptRequest(requestId) {\n                this.$confirm('确定接受此交换请求吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.$api.acceptExchangeRequest(requestId).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('已接受交换请求');\n                            this.loadExchangeRequests();\n                        } else {\n                            this.$message.error(res.msg || '操作失败');\n                        }\n                    }).catch(err => {\n                        console.error('接受交换请求失败', err);\n                        this.$message.error('接受交换请求失败');\n                    });\n                }).catch(() => {\n                    // 取消操作\n                });\n            },\n            rejectRequest(requestId) {\n                this.$confirm('确定拒绝此交换请求吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.$api.rejectExchangeRequest(requestId).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('已拒绝交换请求');\n                            this.loadExchangeRequests();\n                        } else {\n                            this.$message.error(res.msg || '操作失败');\n                        }\n                    }).catch(err => {\n                        console.error('拒绝交换请求失败', err);\n                        this.$message.error('拒绝交换请求失败');\n                    });\n                }).catch(() => {\n                    // 取消操作\n                });\n            },\n            completeExchange(requestId) {\n                this.$confirm('确认已完成物品交换吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.$api.completeExchange(requestId).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('交换已完成');\n                            this.loadExchangeRequests();\n                        } else {\n                            this.$message.error(res.msg || '操作失败');\n                        }\n                    }).catch(err => {\n                        console.error('完成交换失败', err);\n                        this.$message.error('完成交换失败');\n                    });\n                }).catch(() => {\n                    // 取消操作\n                });\n            },\n            getFirstImage(pictureList) {\n                if (Array.isArray(pictureList)) {\n                    return this.getImageUrl(pictureList[0]);\n                } else if (typeof pictureList === 'string') {\n                    return this.getImageUrl(pictureList);\n                } else {\n                    console.error('无效的图片列表格式');\n                    return '';\n                }\n            },\n            // 捐赠相关方法\n            donationButton(idleItemInfo) {\n                this.donationForm.itemId = idleItemInfo.id;\n                this.donationDialogVisible = true;\n            },\n            submitDonationRequest() {\n                this.$refs.donationForm.validate((valid) => {\n                    if (valid) {\n                        this.submitLoading = true;\n                        this.$api.createDonationRequest({\n                            itemId: this.donationForm.itemId,\n                            donationType: this.donationForm.donationType,\n                            donationReason: this.donationForm.donationReason\n                        }).then(res => {\n                            if (res.status_code === 1) {\n                                this.$message.success('捐赠请求已提交');\n                                this.donationDialogVisible = false;\n                                \n                                // 清空表单\n                                this.donationForm.donationType = 0;\n                                this.donationForm.donationReason = '';\n                                \n                                // 更新物品状态\n                                this.idleItemInfo.idleStatus = 2; // 捐赠中自动下架\n                                \n                            } else {\n                                this.$message.error(res.msg || '提交捐赠请求失败');\n                            }\n                        }).catch(err => {\n                            console.error('提交捐赠请求失败', err);\n                            this.$message.error('提交捐赠请求失败');\n                        }).finally(() => {\n                            this.submitLoading = false;\n                        });\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            // 添加举报按钮点击事件\n            reportButton(idleItemInfo) {\n                this.reportDialogVisible = true;\n            },\n        },\n    }\n",{"version":3,"sources":["idle-details.vue"],"names":[],"mappings":";AAwZA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"idle-details.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div>\n        <app-head></app-head>\n        <app-body>\n            <div class=\"idle-details-container\">\n                <div class=\"details-header\">\n                    <div class=\"details-header-user-info\">\n                        <el-image\n                                style=\"width: 80px; height: 80px;border-radius: 5px;\"\n                                :src=\"idleItemInfo.user.avatar\"\n                                fit=\"contain\"></el-image>\n                        <div style=\"margin-left: 10px;\">\n                            <div class=\"details-header-user-info-nickname\">{{idleItemInfo.user.nickname}}</div>\n                            <div class=\"details-header-user-info-time\">{{idleItemInfo.user.signInTime.substring(0,10)}} 加入平台</div>\n                        </div>\n                    </div>\n                    <div class=\"details-header-buy\">\n                        <div v-show=\"idleItemInfo.idlePrice !== 0\" style=\"color: red;font-size: 18px;font-weight: 600; margin-right: 10px;\">￥{{idleItemInfo.idlePrice}}</div>\n                        <div v-if=\"!isMaster&&idleItemInfo.idleStatus!==1\" style=\"color: red;font-size: 16px;\">闲置已下架或删除</div>\n                        <el-button v-show=\"idleItemInfo.idlePrice > 0\" v-if=\"!isMaster&&idleItemInfo.idleStatus===1\" type=\"danger\" plain @click=\"buyButton(idleItemInfo)\">立即购买</el-button>\n                        <el-button v-show=\"idleItemInfo.idlePrice > 0\" v-if=\"!isMaster&&idleItemInfo.idleStatus===1\" type=\"primary\" plain @click=\"favoriteButton(idleItemInfo)\">{{isFavorite?'取消收藏':'加入收藏'}}</el-button>\n                        <el-button v-if=\"!isMaster&&idleItemInfo.idleStatus===1\" type=\"warning\" plain @click=\"exchangeButton(idleItemInfo)\">发起易物交换</el-button>\n                        <el-button v-if=\"!isMaster\" type=\"info\" plain @click=\"reportButton(idleItemInfo)\">举报</el-button>\n                        <el-button\n                            v-show='idleItemInfo.idlePrice >= 0'\n                            v-if=\"isMaster&&idleItemInfo.idleStatus===1\"\n                            type='primary'\n                            plain\n                            @click=\"isEditing ? saveChanges(idleItemInfo) : editButton()\">{{ buttonText }}</el-button>\n                        <el-button v-if=\"isMaster&&idleItemInfo.idleStatus===1\" type=\"danger\" @click=\"changeStatus(idleItemInfo,2)\" plain>下架</el-button>\n                        <el-button v-if=\"isMaster&&idleItemInfo.idleStatus===2\" type=\"primary\" @click=\"changeStatus(idleItemInfo,1)\" plain>重新上架</el-button>\n                        <el-button v-if=\"isMaster&&idleItemInfo.idleStatus===1\" type=\"info\" plain @click=\"viewReceivedRequests\">查看交换请求</el-button>\n                        <el-button v-if=\"isMaster&&idleItemInfo.idleStatus===1\" type=\"success\" plain @click=\"donationButton(idleItemInfo)\">爱心捐赠</el-button>\n                    </div>\n                </div>\n\n\n                <div class=\"details-info\">\n\n                    <div v-if=\"isEditing\">\n                        <label class=\"input-label\">价格</label>\n                        <el-input v-model=\"idleItemInfo.idlePrice\" placeholder=\"请输入商品价格\"></el-input>\n                    </div>\n                    <div class=\"details-info-title\" v-if=\"isEditing\">\n                        <label class=\"input-label\">名称</label>\n                        <el-input v-model=\"idleItemInfo.idleName\" placeholder=\"请输入商品名称\"></el-input>\n                    </div>\n                    <div class=\"details-info-title\" v-else>\n                        {{idleItemInfo.idleName}}\n                    </div>\n                    <div v-if=\"isEditing\">\n                        <label class=\"input-label\">详情</label>\n                        <el-input type=\"textarea\" autosize placeholder=\"请输入商品详情...\" v-model=\"idleItemInfo.idleDetails\"></el-input>\n                    </div>\n                    <div class=\"details-info-main\" v-else v-html=\"idleItemInfo.idleDetails\"></div>\n                    <div class=\"details-picture\">\n                        <template v-if=\"isEditing\">\n                            <!-- 编辑模式下的上传控件 -->\n                            <el-upload\n                                :on-remove=\"fileHandleRemove\"\n                                :on-success=\"fileHandleSuccess\"\n                                :on-change=\"imgChange\"\n                                action=\"http://localhost:8082/file\"\n                                list-type=\"picture-card\"\n                                :file-list=\"fileList\"\n                                :before-upload=\"beforeUpload\"\n                            >\n                                <i class=\"el-icon-plus\"></i>\n                            </el-upload>\n                        </template>\n                        <template v-else>\n                            <!-- 显示模式下的图片列表 -->\n                            <div v-loading=\"imageLoading\" class=\"image-container\">\n                                <el-image\n                                    v-for=\"(imgUrl, i) in processedPictureList\"\n                                    :key=\"i\"\n                                    style=\"width: 90%; margin-bottom: 2px;\"\n                                    :src=\"getImageUrl(imgUrl)\"\n                                    fit=\"contain\"\n                                    @load=\"handleImageLoad\"\n                                    @error=\"handleImageError\"\n                                >\n                                    <div slot=\"error\" class=\"image-slot\">\n                                        <i class=\"el-icon-picture-outline\"></i>\n                                        <p>图片加载失败</p>\n                                    </div>\n                                </el-image>\n                            </div>\n                            <div v-if=\"!processedPictureList.length\" class=\"no-image\">\n                                <i class=\"el-icon-picture-outline\"></i>\n                                <p>暂无图片</p>\n                            </div>\n                        </template>\n                    </div>\n                </div>\n\n                <div class=\"message-container\" id=\"replyMessageLocation\">\n                    <div class=\"message-title\">全部留言</div>\n                    <div class=\"message-send\">\n                        <div v-if=\"isReply\" style=\"padding-bottom: 10px;\">\n                            <el-button type=\"info\" @click=\"cancelReply\">回复：{{replyData.toMessage}} @{{replyData.toUserNickname}} <i class=\"el-icon-close el-icon--right\"></i></el-button>\n                        </div>\n                        <el-input\n                                type=\"textarea\"\n                                autosize\n                                placeholder=\"留言提问...\"\n                                v-model=\"messageContent\"\n                                maxlength=\"200\"\n                                show-word-limit>\n                        </el-input>\n                        <div class=\"message-send-button\">\n                            <el-button plain @click=\"sendMessage\">发送留言</el-button>\n                        </div>\n                    </div>\n                    <div>\n                        <div v-for=\"(mes,index) in messageList\" class=\"message-container-list\">\n                            <div class=\"message-container-list-left\">\n                                <el-image\n                                        style=\"width: 55px; height: 55px;border-radius: 5px;\"\n                                        :src=\"mes.fromU.avatar\"\n                                        fit=\"contain\"></el-image>\n                                <div class=\"message-container-list-text\">\n                                    <div class=\"message-nickname\">{{mes.fromU.nickname}}\n                                        {{mes.toU.nickname?' @'+mes.toU.nickname+'：'+\n                                        mes.toM.content.substring(0,10)+\n                                        (mes.toM.content.length>10?'...':''):''}}</div>\n                                    <div class=\"message-content\" v-html=\"mes.content\"></div>\n                                    <div class=\"message-time\">{{mes.createTime}}</div>\n                                </div>\n                            </div>\n                            <div class=\"message-container-list-right\">\n                                <el-button style=\"float: right;\"  plain @click=\"replyMessage(index)\">回复</el-button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <app-foot></app-foot>\n\n            <!-- 添加易物交换弹窗 -->\n            <el-dialog\n                title=\"发起易物交换\"\n                :visible.sync=\"exchangeDialogVisible\"\n                width=\"60%\">\n                <el-form :model=\"exchangeForm\" :rules=\"exchangeRules\" ref=\"exchangeForm\" label-width=\"120px\">\n                    <el-form-item label=\"交换对象物品\" prop=\"requestItemId\">\n                        <div class=\"exchange-preview-item\">\n                            <div v-if=\"idleItemInfo\">\n                                <div class=\"item-preview\">\n                                    <img :src=\"getImageUrl(processedPictureList[0])\" class=\"preview-img\">\n                                    <div class=\"item-info\">\n                                        <div class=\"item-name\">{{ idleItemInfo.idleName }}</div>\n                                        <div class=\"item-price\">¥{{ idleItemInfo.idlePrice }}</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </el-form-item>\n                    \n                    <el-form-item label=\"物品所有者\">\n                        <div class=\"owner-info\" v-if=\"idleItemInfo && idleItemInfo.user\">\n                            <img :src=\"idleItemInfo.user.avatar\" class=\"owner-avatar\">\n                            <span class=\"owner-name\">{{ idleItemInfo.user.nickname }}</span>\n                        </div>\n                    </el-form-item>\n                    \n                    <el-form-item label=\"我的交换物品\" prop=\"offerItemId\">\n                        <el-select v-model=\"exchangeForm.offerItemId\" placeholder=\"选择您提供交换的物品\">\n                            <el-option\n                                v-for=\"item in myItems\"\n                                :key=\"item.id\"\n                                :label=\"item.idleName\"\n                                :value=\"item.id\">\n                                <div class=\"item-option\">\n                                    <img :src=\"getFirstImage(item.pictureList)\" class=\"item-img\">\n                                    <div class=\"item-info\">\n                                        <div class=\"item-name\">{{ item.idleName }}</div>\n                                        <div class=\"item-price\">¥{{ item.idlePrice }}</div>\n                                    </div>\n                                </div>\n                            </el-option>\n                        </el-select>\n                    </el-form-item>\n                    \n                    <el-form-item label=\"交换理由\" prop=\"exchangeReason\">\n                        <el-input\n                            type=\"textarea\"\n                            :rows=\"4\"\n                            placeholder=\"请输入交换理由，向对方说明为什么想要交换这个物品\"\n                            v-model=\"exchangeForm.exchangeReason\">\n                        </el-input>\n                    </el-form-item>\n                </el-form>\n                \n                <div class=\"exchange-preview\" v-if=\"exchangeForm.offerItemId\">\n                    <h4>交换预览</h4>\n                    <el-divider></el-divider>\n                    <div class=\"exchange-preview-content\">\n                        <div class=\"preview-item\">\n                            <h4>我将获得</h4>\n                            <div class=\"item-card\" v-if=\"idleItemInfo\">\n                                <img :src=\"getImageUrl(processedPictureList[0])\" class=\"preview-img\">\n                                <div class=\"preview-info\">\n                                    <div class=\"preview-name\">{{ idleItemInfo.idleName }}</div>\n                                    <div class=\"preview-price\">¥{{ idleItemInfo.idlePrice }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"exchange-arrow\">\n                            <i class=\"el-icon-right\"></i>\n                        </div>\n                        <div class=\"preview-item\">\n                            <h4>我将付出</h4>\n                            <div class=\"item-card\" v-if=\"selectedMyItem\">\n                                <img :src=\"getFirstImage(selectedMyItem.pictureList)\" class=\"preview-img\">\n                                <div class=\"preview-info\">\n                                    <div class=\"preview-name\">{{ selectedMyItem.idleName }}</div>\n                                    <div class=\"preview-price\">¥{{ selectedMyItem.idlePrice }}</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <span slot=\"footer\" class=\"dialog-footer\">\n                    <el-button @click=\"exchangeDialogVisible = false\">取 消</el-button>\n                    <el-button type=\"primary\" @click=\"submitExchangeRequest\" :loading=\"submitLoading\">提交交换请求</el-button>\n                </span>\n            </el-dialog>\n            \n            <!-- 添加查看交换请求弹窗 -->\n            <el-dialog\n                title=\"交换请求管理\"\n                :visible.sync=\"exchangeRequestsDialogVisible\"\n                width=\"70%\">\n                <el-tabs v-model=\"activeRequestTab\">\n                    <el-tab-pane label=\"收到的请求\" name=\"received\">\n                        <div v-loading=\"requestsLoading\">\n                            <div v-if=\"receivedRequests.length === 0\" class=\"empty-requests\">\n                                <i class=\"el-icon-info\"></i>\n                                <p>暂无收到的交换请求</p>\n                            </div>\n                            <el-card v-for=\"request in receivedRequests\" :key=\"request.id\" class=\"request-card\">\n                                <div class=\"request-header\">\n                                    <div class=\"request-user\">\n                                        <img :src=\"request.requestUser.avatar\" class=\"user-avatar\">\n                                        <span>{{ request.requestUser.nickname }}</span>\n                                    </div>\n                                    <div class=\"request-time\">{{ request.createTime }}</div>\n                                </div>\n                                <div class=\"request-content\">\n                                    <div class=\"exchange-items\">\n                                        <div class=\"item-card\">\n                                            <div class=\"item-title\">对方想要的物品</div>\n                                            <img :src=\"getFirstImage(request.requestItem.pictureList)\" class=\"item-img\">\n                                            <div class=\"item-info\">\n                                                <div class=\"item-name\">{{ request.requestItem.idleName }}</div>\n                                                <div class=\"item-price\">¥{{ request.requestItem.idlePrice }}</div>\n                                            </div>\n                                        </div>\n                                        <div class=\"exchange-arrow\">\n                                            <i class=\"el-icon-right\"></i>\n                                        </div>\n                                        <div class=\"item-card\">\n                                            <div class=\"item-title\">对方提供的物品</div>\n                                            <img :src=\"getFirstImage(request.offerItem.pictureList)\" class=\"item-img\">\n                                            <div class=\"item-info\">\n                                                <div class=\"item-name\">{{ request.offerItem.idleName }}</div>\n                                                <div class=\"item-price\">¥{{ request.offerItem.idlePrice }}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"request-reason\">\n                                        <div class=\"reason-title\">交换理由:</div>\n                                        <div class=\"reason-content\">{{ request.exchangeReason }}</div>\n                                    </div>\n                                </div>\n                                <div class=\"request-actions\">\n                                    <el-tag :type=\"getStatusTag(request.status).type\">{{ getStatusTag(request.status).text }}</el-tag>\n                                    <div class=\"action-buttons\" v-if=\"request.status === 0\">\n                                        <el-button type=\"success\" size=\"small\" @click=\"acceptRequest(request.id)\">接受</el-button>\n                                        <el-button type=\"danger\" size=\"small\" @click=\"rejectRequest(request.id)\">拒绝</el-button>\n                                    </div>\n                                    <div class=\"action-buttons\" v-if=\"request.status === 1\">\n                                        <el-button type=\"primary\" size=\"small\" @click=\"completeExchange(request.id)\">完成交换</el-button>\n                                    </div>\n                                </div>\n                            </el-card>\n                        </div>\n                    </el-tab-pane>\n                    <el-tab-pane label=\"我发送的请求\" name=\"sent\">\n                        <div v-loading=\"requestsLoading\">\n                            <div v-if=\"sentRequests.length === 0\" class=\"empty-requests\">\n                                <i class=\"el-icon-info\"></i>\n                                <p>暂无发送的交换请求</p>\n                            </div>\n                            <el-card v-for=\"request in sentRequests\" :key=\"request.id\" class=\"request-card\">\n                                <div class=\"request-header\">\n                                    <div class=\"request-user\">\n                                        <img :src=\"request.itemOwner.avatar\" class=\"user-avatar\">\n                                        <span>发送给: {{ request.itemOwner.nickname }}</span>\n                                    </div>\n                                    <div class=\"request-time\">{{ request.createTime }}</div>\n                                </div>\n                                <div class=\"request-content\">\n                                    <div class=\"exchange-items\">\n                                        <div class=\"item-card\">\n                                            <div class=\"item-title\">我想要的物品</div>\n                                            <img :src=\"getFirstImage(request.requestItem.pictureList)\" class=\"item-img\">\n                                            <div class=\"item-info\">\n                                                <div class=\"item-name\">{{ request.requestItem.idleName }}</div>\n                                                <div class=\"item-price\">¥{{ request.requestItem.idlePrice }}</div>\n                                            </div>\n                                        </div>\n                                        <div class=\"exchange-arrow\">\n                                            <i class=\"el-icon-right\"></i>\n                                        </div>\n                                        <div class=\"item-card\">\n                                            <div class=\"item-title\">我提供的物品</div>\n                                            <img :src=\"getFirstImage(request.offerItem.pictureList)\" class=\"item-img\">\n                                            <div class=\"item-info\">\n                                                <div class=\"item-name\">{{ request.offerItem.idleName }}</div>\n                                                <div class=\"item-price\">¥{{ request.offerItem.idlePrice }}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"request-reason\">\n                                        <div class=\"reason-title\">交换理由:</div>\n                                        <div class=\"reason-content\">{{ request.exchangeReason }}</div>\n                                    </div>\n                                </div>\n                                <div class=\"request-actions\">\n                                    <el-tag :type=\"getStatusTag(request.status).type\">{{ getStatusTag(request.status).text }}</el-tag>\n                                </div>\n                            </el-card>\n                        </div>\n                    </el-tab-pane>\n                </el-tabs>\n            </el-dialog>\n\n            <!-- 添加捐赠弹窗 -->\n            <el-dialog\n                title=\"爱心捐赠\"\n                :visible.sync=\"donationDialogVisible\"\n                width=\"50%\">\n                <el-form :model=\"donationForm\" :rules=\"donationRules\" ref=\"donationForm\" label-width=\"120px\">\n                    <el-form-item label=\"捐赠物品\" prop=\"itemId\">\n                        <div class=\"donation-preview-item\">\n                            <div v-if=\"idleItemInfo\">\n                                <div class=\"item-preview\">\n                                    <img :src=\"getImageUrl(processedPictureList[0])\" class=\"preview-img\">\n                                    <div class=\"item-info\">\n                                        <div class=\"item-name\">{{ idleItemInfo.idleName }}</div>\n                                        <div class=\"item-price\">¥{{ idleItemInfo.idlePrice }}</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </el-form-item>\n                    \n                    <el-form-item label=\"捐赠类型\" prop=\"donationType\">\n                        <el-radio-group v-model=\"donationForm.donationType\">\n                            <el-radio :label=\"0\">公益捐赠</el-radio>\n                            <el-radio :label=\"1\">环保回收</el-radio>\n                        </el-radio-group>\n                    </el-form-item>\n                    \n                    <el-form-item label=\"捐赠理由\" prop=\"donationReason\">\n                        <el-input\n                            type=\"textarea\"\n                            :rows=\"4\"\n                            placeholder=\"请输入捐赠理由，说明为什么想要捐赠这个物品\"\n                            v-model=\"donationForm.donationReason\">\n                        </el-input>\n                    </el-form-item>\n                </el-form>\n                \n                <div class=\"donation-notes\">\n                    <p><i class=\"el-icon-info\"></i> 捐赠说明：</p>\n                    <p>1. 公益捐赠：您的物品将捐赠给有需要的人或公益组织</p>\n                    <p>2. 环保回收：闲置物品将被环保回收，减少资源浪费</p>\n                    <p>3. 捐赠成功后，物品将自动下架</p>\n                    <p>4. 捐赠后可能有工作人员与您联系，请保持联系方式畅通</p>\n                </div>\n                \n                <span slot=\"footer\" class=\"dialog-footer\">\n                    <el-button @click=\"donationDialogVisible = false\">取 消</el-button>\n                    <el-button type=\"primary\" @click=\"submitDonationRequest\" :loading=\"submitLoading\">提交捐赠</el-button>\n                </span>\n            </el-dialog>\n\n            <!-- 添加举报弹窗 -->\n            <el-dialog\n                title=\"举报\"\n                :visible.sync=\"reportDialogVisible\"\n                width=\"50%\">\n                <report-form \n                    :reported-user-id=\"idleItemInfo.userId\"\n                    :reported-item-id=\"idleItemInfo.id\"\n                    @report-submitted=\"reportDialogVisible = false\"\n                    @cancel=\"reportDialogVisible = false\">\n                </report-form>\n            </el-dialog>\n        </app-body>\n    </div>\n</template>\n\n<script>\n    import AppHead from '../common/AppHeader.vue';\n    import AppBody from '../common/AppPageBody.vue'\n    import AppFoot from '../common/AppFoot.vue'\n    import ReportForm from '../common/ReportForm.vue';\n\n    export default {\n        name: \"idle-details\",\n        components: {\n            AppHead,\n            AppBody,\n            AppFoot,\n            ReportForm\n        },\n        data() {\n            return {\n                buttonText:'编辑',\n                isEditing:false,\n                messageContent:'',\n                toUser:null,\n                toMessage:null,\n                isReply:false,\n                replyData:{\n                    toUserNickname:'',\n                    toMessage:''\n                },\n                messageList:[],\n                idleItemInfo:{\n                    id:'',\n                    idleName:'',\n                    idleDetails:'',\n                    pictureList:[],\n                    idlePrice:0,\n                    idlePlace:'',\n                    idleLabel:'',\n                    idleStatus:-1,\n                    userId:'',\n                    user:{\n                        avatar:'',\n                        nickname:'',\n                        signInTime:''\n                    },\n                },\n                editingIdleItem:null,\n                isMaster:false,\n                isFavorite:true,\n                favoriteId:0,\n                imageLoading: true,\n                loadedImages: 0,\n                totalImages: 0,\n                exchangeDialogVisible: false,\n                exchangeForm: {\n                    requestItemId: '',\n                    offerItemId: '',\n                    itemOwnerId: '',\n                    exchangeReason: ''\n                },\n                exchangeRules: {\n                    offerItemId: [\n                        { required: true, message: '请选择您提供交换的物品', trigger: 'change' }\n                    ],\n                    exchangeReason: [\n                        { required: true, message: '请输入交换理由', trigger: 'blur' },\n                        { min: 5, max: 200, message: '长度在 5 到 200 个字符', trigger: 'blur' }\n                    ]\n                },\n                submitLoading: false,\n                myItems: [],\n                selectedMyItem: null,\n                exchangeRequestsDialogVisible: false,\n                activeRequestTab: 'received',\n                receivedRequests: [],\n                sentRequests: [],\n                requestsLoading: false,\n                // 捐赠相关数据\n                donationDialogVisible: false,\n                donationForm: {\n                    itemId: '',\n                    donationType: 0,\n                    donationReason: ''\n                },\n                donationRules: {\n                    donationType: [\n                        { required: true, message: '请选择捐赠类型', trigger: 'change' }\n                    ],\n                    donationReason: [\n                        { required: true, message: '请输入捐赠理由', trigger: 'blur' },\n                        { min: 5, max: 200, message: '长度在 5 到 200 个字符', trigger: 'blur' }\n                    ]\n                },\n                reportDialogVisible: false\n            };\n        },\n        computed: {\n            processedPictureList() {\n                if (!this.idleItemInfo.pictureList) return [];\n                if (typeof this.idleItemInfo.pictureList === 'string') {\n                    try {\n                        return JSON.parse(this.idleItemInfo.pictureList);\n                    } catch (e) {\n                        console.error('解析图片列表失败:', e);\n                        return [];\n                    }\n                }\n                return Array.isArray(this.idleItemInfo.pictureList) \n                    ? this.idleItemInfo.pictureList \n                    : [this.idleItemInfo.pictureList];\n            },\n            fileList() {\n                return this.processedPictureList.map(img => ({\n                    name: img,\n                    url: this.getImageUrl(img)\n                }));\n            },\n            selectedMyItem() {\n                return this.myItems.find(item => item.id === this.exchangeForm.offerItemId);\n            }\n        },\n        created(){\n            this.getMyIdleById();\n        },\n        methods: {\n            getMyIdleById(){\n                this.imageLoading = true;\n                let id = this.$route.query.id;\n                this.$api.getIdleItem({\n                    id: id\n                }).then(res => {\n                    console.log('商品详情原始数据:', res);\n                    if (res.data) {\n                        // 处理商品详情的换行\n                        let list = res.data.idleDetails.split(/\\r?\\n/);\n                        let str = '';\n                        for (let i = 0; i < list.length; i++) {\n                            str += list[i];\n                        }\n                        res.data.idleDetails = str;\n\n                        // 处理图片列表\n                        try {\n                            if (typeof res.data.pictureList === 'string') {\n                                const pictureList = JSON.parse(res.data.pictureList);\n                                res.data.pictureList = Array.isArray(pictureList) ? pictureList : [pictureList];\n                            }\n                            console.log('处理后的图片列表:', res.data.pictureList);\n                        } catch (e) {\n                            console.error('解析图片列表失败:', e);\n                            res.data.pictureList = [];\n                        }\n\n                        this.idleItemInfo = res.data;\n                        this.totalImages = this.processedPictureList.length;\n                        this.loadedImages = 0;\n\n                        // 预加载图片\n                        this.processedPictureList.forEach(imgUrl => {\n                            const img = new Image();\n                            img.onload = () => {\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.onerror = (e) => {\n                                console.error('图片预加载失败:', imgUrl, e);\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.src = this.getImageUrl(imgUrl);\n                        });\n\n                        let userId = this.getCookie('shUserId');\n                        if (userId == this.idleItemInfo.userId) {\n                            this.isMaster = true;\n                        }\n                        this.checkFavorite();\n                        this.checkMyIdle();\n                        this.getAllIdleMessage();\n                    }\n                }).catch(error => {\n                    console.error('获取商品详情失败:', error);\n                    this.$message.error('获取商品详情失败，请重试');\n                    this.imageLoading = false;\n                });\n            },\n            saveChanges(idleItemInfo) {\n                const updatedInfo = {\n                    ...idleItemInfo,\n                    pictureList: JSON.stringify(this.idleItemInfo.pictureList),\n                };\n                // 这里添加调用API更新商品信息的逻辑\n                this.$api.updateIdleItem(updatedInfo).then(() => {\n                    // this.getMyIdleById();\n                    this.$message.success('商品信息更新成功');\n                    this.isEditing = false; // 保存后关闭编辑模式\n                    this.buttonText = '编辑商品'\n                }).catch(() => {\n                    this.$message.error('更新失败，请重试');\n                });\n            },\n            imgChange(file, fileList){\n                this.noneBtnImg = fileList.length >= this.limitCountImg;\n            },\n            fileHandleRemove(file,fileList) {\n                console.log(file, fileList);\n                // 修改：现在需要找到对应的本地路径\n                const urlToRemove = file.localPath || file.url; \n                // 在pictureList中查找对应项\n                const index = this.idleItemInfo.pictureList.indexOf(urlToRemove);\n                console.log(this)\n\n                if (index > -1) {\n                    // 找到了匹配的项，从idleItemInfo.pictureList中移除\n                    this.idleItemInfo.pictureList.splice(index, 1);\n                    this.$forceUpdate();\n                } else {\n                    console.warn('Path not found in the list to remove.');\n                }\n            },\n            fileHandlePreview(file) {\n                console.log(file);\n                // 修改：如果response.data是对象，则使用accessUrl\n                if(file.response && file.response.data) {\n                    const fileData = file.response.data;\n                    this.dialogImageUrl = fileData.accessUrl || fileData;\n                } else {\n                    this.dialogImageUrl = file.url;\n                }\n                this.imgDialogVisible=true;\n            },\n            fileHandleSuccess(response, file, fileList) {\n                console.log(\"file:\", response, file, fileList);\n                // 修改：现在response.data是一个包含localPath和accessUrl的对象\n                const fileData = response.data;\n                // 将本地路径添加到pictureList\n                this.idleItemInfo.pictureList.push(fileData.localPath);\n                // 但在界面展示时使用accessUrl\n                file.url = fileData.accessUrl;\n                file.localPath = fileData.localPath; // 保存本地路径便于后续操作\n            },\n            editButton(){\n                this.isEditing = !this.isEditing;\n                this.buttonText = '保存修改'\n            },\n            getAllIdleMessage(){\n                this.$api.getAllIdleMessage({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    console.log('getAllIdleMessage',res.data);\n                    if(res.status_code===1){\n                        this.messageList=res.data;\n                    }\n                }).catch(()=>{\n                })\n            },\n            checkFavorite(){\n                this.$api.checkFavorite({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if(!res.data){\n                        this.isFavorite=false;\n                    }else {\n                        this.favoriteId=res.data;\n                    }\n                })\n            },\n            checkMyIdle(){\n                this.$api.checkMyIdle({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if (res.data){\n                        this.isMaster = true;\n                    }else {\n                        this.isMaster = false;\n                    }\n                })\n            },\n            getCookie(cname){\n                var name = cname + \"=\";\n                var ca = document.cookie.split(';');\n                for(var i=0; i<ca.length; i++)\n                {\n                    var c = ca[i].trim();\n                    if (c.indexOf(name)===0) return c.substring(name.length,c.length);\n                }\n                return \"\";\n            },\n            replyMessage(index){\n                $('html,body').animate({\n                    scrollTop: $(\"#replyMessageLocation\").offset().top-600\n                }, {duration: 500, easing: \"swing\"});\n                this.isReply=true;\n                this.replyData.toUserNickname=this.messageList[index].fromU.nickname;\n                this.replyData.toMessage=this.messageList[index].content.substring(0,10)+(this.messageList[index].content.length>10?'...':'');\n                this.toUser=this.messageList[index].userId;\n                this.toMessage=this.messageList[index].id;\n            },\n            changeStatus(idle,status){\n                this.$api.updateIdleItem({\n                    id:idle.id,\n                    idleStatus:status\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.idleItemInfo.idleStatus=status;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                });\n            },\n            buyButton(idleItemInfo){\n                this.$api.addOrder({\n                    idleId:idleItemInfo.id,\n                    orderPrice:idleItemInfo.idlePrice,\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.$router.push({path: '/order', query: {id: res.data.id}});\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e=>{\n\n                })\n            },\n            favoriteButton(idleItemInfo){\n                if(this.isFavorite){\n                    this.$api.deleteFavorite({\n                        id: this.favoriteId\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已取消收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=false;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }else {\n                    this.$api.addFavorite({\n                        idleId:idleItemInfo.id\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已加入收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=true;\n                            this.favoriteId=res.data;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }\n            },\n            cancelReply(){\n                this.isReply=false;\n                this.toUser=this.idleItemInfo.userId;\n                this.toMessage=null;\n                this.replyData.toUserNickname='';\n                this.replyData.toMessage='';\n            },\n\n            sendMessage(){\n                let content=this.messageContent.trim();\n                if(this.toUser==null){\n                    this.toUser=this.idleItemInfo.userId;\n                }\n                if(content){\n                    let contentList=content.split(/\\r?\\n/);\n                    let contenHtml=contentList[0];\n                    for(let i=1;i<contentList.length;i++){\n                        contenHtml+='<br>'+contentList[i];\n                    }\n                    this.$api.sendMessage({\n                        idleId:this.idleItemInfo.id,\n                        content:contenHtml,\n                        toUser:this.toUser,\n                        toMessage:this.toMessage\n                    }).then(res=>{\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '留言成功！',\n                                type: 'success'\n                            });\n                            this.messageContent='';\n                            this.cancelReply();\n                            this.getAllIdleMessage();\n                        }else {\n                            this.$message.error(\"留言失败！\"+res.msg);\n                        }\n                    }).catch(()=>{\n                        this.$message.error(\"留言失败！\");\n                    });\n\n                }else{\n                    this.$message.error(\"留言为空！\");\n                }\n            },\n            getImageUrl(url) {\n                // 检查url是否已经是HTTP URL\n                if (url && (url.startsWith('http://') || url.startsWith('https://'))) {\n                    return url;\n                }\n                \n                // 检查url是否是一个本地文件路径\n                if (url && (url.startsWith('/') || url.startsWith('D:') || url.includes('\\\\') || url.includes('/'))) {\n                    // 如果是本地路径，则转换为服务器URL\n                    // 这里假设文件名是路径最后的部分\n                    const fileName = url.split(/[/\\\\]/).pop();\n                    // 构建访问URL\n                    return `http://localhost:8082/image?imageName=${fileName}`;\n                }\n                \n                // 如果是简单的文件名，直接构建访问URL\n                if (url && url.trim() !== '') {\n                    return `http://localhost:8082/image?imageName=${url}`;\n                }\n                \n                // 其他情况直接返回\n                return url;\n            },\n            handleImageLoad() {\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            handleImageError(e) {\n                console.error('图片加载失败:', e);\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            beforeUpload(file) {\n                const isImage = file.type.startsWith('image/');\n                const isLt2M = file.size / 1024 / 1024 < 2;\n\n                if (!isImage) {\n                    this.$message.error('只能上传图片文件!');\n                    return false;\n                }\n                if (!isLt2M) {\n                    this.$message.error('图片大小不能超过 2MB!');\n                    return false;\n                }\n                return true;\n            },\n            exchangeButton(idleItemInfo) {\n                // 设置表单初始值\n                this.exchangeForm.requestItemId = idleItemInfo.id;\n                this.exchangeForm.itemOwnerId = idleItemInfo.userId;\n                \n                // 加载我的可交换物品\n                this.loadMyItems();\n                \n                // 显示对话框\n                this.exchangeDialogVisible = true;\n            },\n            loadMyItems() {\n                this.$api.checkMyIdle().then(res => {\n                    if (res.data) {\n                        // 过滤出在售状态的物品\n                        this.myItems = res.data.filter(item => item.idleStatus === 1);\n                    }\n                }).catch(err => {\n                    console.error('获取我的物品失败', err);\n                    this.$message.error('获取我的物品失败');\n                });\n            },\n            submitExchangeRequest() {\n                this.$refs.exchangeForm.validate((valid) => {\n                    if (valid) {\n                        this.submitLoading = true;\n                        this.$api.createExchangeRequest({\n                            requestItemId: this.exchangeForm.requestItemId,\n                            offerItemId: this.exchangeForm.offerItemId,\n                            itemOwnerId: this.exchangeForm.itemOwnerId,\n                            exchangeReason: this.exchangeForm.exchangeReason\n                        }).then(res => {\n                            if (res.status_code === 1) {\n                                this.$message.success('交换请求已发送');\n                                this.exchangeDialogVisible = false;\n                                \n                                // 清空表单\n                                this.exchangeForm.offerItemId = '';\n                                this.exchangeForm.exchangeReason = '';\n                            } else {\n                                this.$message.error(res.msg || '发送交换请求失败');\n                            }\n                        }).catch(err => {\n                            console.error('发送交换请求失败', err);\n                            this.$message.error('发送交换请求失败');\n                        }).finally(() => {\n                            this.submitLoading = false;\n                        });\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            viewReceivedRequests() {\n                this.exchangeRequestsDialogVisible = true;\n                this.loadExchangeRequests();\n            },\n            loadExchangeRequests() {\n                this.requestsLoading = true;\n                \n                // 加载收到的请求\n                this.$api.getReceivedExchangeRequests().then(res => {\n                    if (res.data) {\n                        this.receivedRequests = res.data;\n                    } else {\n                        this.receivedRequests = [];\n                    }\n                }).catch(err => {\n                    console.error('获取收到的交换请求失败', err);\n                    this.$message.error('获取收到的交换请求失败');\n                });\n                \n                // 加载发送的请求\n                this.$api.getMyExchangeRequests().then(res => {\n                    if (res.data) {\n                        this.sentRequests = res.data;\n                    } else {\n                        this.sentRequests = [];\n                    }\n                }).catch(err => {\n                    console.error('获取发送的交换请求失败', err);\n                    this.$message.error('获取发送的交换请求失败');\n                }).finally(() => {\n                    this.requestsLoading = false;\n                });\n            },\n            getStatusTag(status) {\n                const statusMap = {\n                    0: { type: 'info', text: '等待审核' },\n                    1: { type: 'success', text: '已接受' },\n                    2: { type: 'danger', text: '已拒绝' },\n                    3: { type: 'primary', text: '已完成' }\n                };\n                return statusMap[status] || { type: 'info', text: '未知状态' };\n            },\n            acceptRequest(requestId) {\n                this.$confirm('确定接受此交换请求吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.$api.acceptExchangeRequest(requestId).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('已接受交换请求');\n                            this.loadExchangeRequests();\n                        } else {\n                            this.$message.error(res.msg || '操作失败');\n                        }\n                    }).catch(err => {\n                        console.error('接受交换请求失败', err);\n                        this.$message.error('接受交换请求失败');\n                    });\n                }).catch(() => {\n                    // 取消操作\n                });\n            },\n            rejectRequest(requestId) {\n                this.$confirm('确定拒绝此交换请求吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.$api.rejectExchangeRequest(requestId).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('已拒绝交换请求');\n                            this.loadExchangeRequests();\n                        } else {\n                            this.$message.error(res.msg || '操作失败');\n                        }\n                    }).catch(err => {\n                        console.error('拒绝交换请求失败', err);\n                        this.$message.error('拒绝交换请求失败');\n                    });\n                }).catch(() => {\n                    // 取消操作\n                });\n            },\n            completeExchange(requestId) {\n                this.$confirm('确认已完成物品交换吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.$api.completeExchange(requestId).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('交换已完成');\n                            this.loadExchangeRequests();\n                        } else {\n                            this.$message.error(res.msg || '操作失败');\n                        }\n                    }).catch(err => {\n                        console.error('完成交换失败', err);\n                        this.$message.error('完成交换失败');\n                    });\n                }).catch(() => {\n                    // 取消操作\n                });\n            },\n            getFirstImage(pictureList) {\n                if (Array.isArray(pictureList)) {\n                    return this.getImageUrl(pictureList[0]);\n                } else if (typeof pictureList === 'string') {\n                    return this.getImageUrl(pictureList);\n                } else {\n                    console.error('无效的图片列表格式');\n                    return '';\n                }\n            },\n            // 捐赠相关方法\n            donationButton(idleItemInfo) {\n                this.donationForm.itemId = idleItemInfo.id;\n                this.donationDialogVisible = true;\n            },\n            submitDonationRequest() {\n                this.$refs.donationForm.validate((valid) => {\n                    if (valid) {\n                        this.submitLoading = true;\n                        this.$api.createDonationRequest({\n                            itemId: this.donationForm.itemId,\n                            donationType: this.donationForm.donationType,\n                            donationReason: this.donationForm.donationReason\n                        }).then(res => {\n                            if (res.status_code === 1) {\n                                this.$message.success('捐赠请求已提交');\n                                this.donationDialogVisible = false;\n                                \n                                // 清空表单\n                                this.donationForm.donationType = 0;\n                                this.donationForm.donationReason = '';\n                                \n                                // 更新物品状态\n                                this.idleItemInfo.idleStatus = 2; // 捐赠中自动下架\n                                \n                            } else {\n                                this.$message.error(res.msg || '提交捐赠请求失败');\n                            }\n                        }).catch(err => {\n                            console.error('提交捐赠请求失败', err);\n                            this.$message.error('提交捐赠请求失败');\n                        }).finally(() => {\n                            this.submitLoading = false;\n                        });\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            // 添加举报按钮点击事件\n            reportButton(idleItemInfo) {\n                this.reportDialogVisible = true;\n            },\n        },\n    }\n</script>\n\n<style scoped>\n    .idle-details-container {\n        min-height: 85vh;\n    }\n\n    .details-header {\n        min-height: 80px;\n        height: auto;\n        border-bottom: 10px solid #f6f6f6;\n        display: flex;\n        justify-content: space-between;\n        padding: 20px;\n        align-items: center;\n        flex-wrap: wrap; /* 小屏幕支持换行 */\n    }\n\n    .details-header-user-info {\n        display: flex;\n    }\n\n    .details-header-user-info-nickname {\n        font-weight: 600;\n        font-size: 18px;\n        margin-bottom: 10px;\n    }\n\n    .details-header-user-info-time {\n        font-size: 12px;\n        color: #555555;\n    }\n\n    .details-header-buy {\n        display: flex;\n        align-items: center;\n        flex-wrap: wrap; /* 允许按钮换行 */\n        gap: 10px; /* 按钮之间的间距 */\n        min-height: 50px;\n        margin-left: 20px; /* 与用户信息保持一定距离 */\n        flex: 1; /* 占用剩余空间 */\n        justify-content: flex-end; /* 按钮靠右对齐 */\n    }\n\n    .details-info {\n        padding: 20px 50px;\n    }\n\n    .details-info-title {\n        font-size: 22px;\n        font-weight: 600;\n        margin-bottom: 20px;\n\n    }\n\n    .details-info-main {\n        font-size: 17px;\n        color: #121212;\n        line-height: 160%;\n    }\n\n    .details-picture {\n        margin: 20px 0;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .message-container {\n        min-height: 100px;\n        border-top: 10px solid #f6f6f6;\n        padding: 20px;\n    }\n\n    .message-title {\n        font-size: 20px;\n        font-weight: 600;\n        margin-bottom: 20px;\n    }\n    .message-send{\n        min-height: 60px;\n    }\n    .message-send-button{\n        margin-top: 10px;\n        display: flex;\n        justify-content: flex-end;\n    }\n    .message-container-list{\n        min-height: 60px;\n        border-top: 1px solid #eeeeee;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 15px 0;\n    }\n    .message-container-list:first-child{\n        border-top:none;\n    }\n    .message-container-list-left{\n        width: 850px;\n        display: flex;\n    }\n    .message-container-list-right{\n        width: 100px;\n    }\n    .message-container-list-text{\n        margin-left: 10px;\n    }\n    .message-nickname{\n        font-weight: 600;\n        font-size: 18px;\n        padding-bottom: 5px;\n    }\n    .message-content{\n        font-size: 16px;\n        padding-bottom: 15px;\n        color: #555555;\n        width: 770px;\n    }\n    .message-time{\n        font-size: 13px;\n        color: #555555;\n    }\n    .image-container {\n        width: 100%;\n        min-height: 200px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .no-image {\n        text-align: center;\n        padding: 40px;\n        color: #909399;\n    }\n\n    .no-image i {\n        font-size: 48px;\n        margin-bottom: 10px;\n    }\n\n    .image-slot {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        background: #f5f7fa;\n        color: #909399;\n    }\n\n    .image-slot i {\n        font-size: 24px;\n        margin-bottom: 10px;\n    }\n\n    /* 易物交换弹窗样式 */\n    .exchange-preview-item {\n        margin-bottom: 15px;\n    }\n    \n    .item-preview {\n        display: flex;\n        align-items: center;\n    }\n    \n    .item-option {\n        display: flex;\n        align-items: center;\n    }\n    \n    .item-img {\n        width: 40px;\n        height: 40px;\n        object-fit: cover;\n        margin-right: 10px;\n        border-radius: 4px;\n    }\n    \n    .owner-info {\n        display: flex;\n        align-items: center;\n    }\n    \n    .owner-avatar {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        margin-right: 10px;\n    }\n    \n    .owner-name {\n        font-size: 14px;\n        color: #303133;\n    }\n    \n    .exchange-preview {\n        margin-top: 20px;\n    }\n    \n    .exchange-preview h4 {\n        margin: 10px 0;\n        color: #409EFF;\n    }\n    \n    .exchange-preview-content {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n    \n    .preview-item {\n        flex: 1;\n        text-align: center;\n    }\n    \n    .exchange-arrow {\n        font-size: 24px;\n        color: #409EFF;\n        margin: 0 20px;\n    }\n    \n    .preview-img {\n        width: 100px;\n        height: 100px;\n        object-fit: cover;\n        border-radius: 4px;\n        margin-bottom: 10px;\n    }\n    \n    .preview-info {\n        text-align: center;\n    }\n    \n    .preview-name {\n        font-size: 14px;\n        color: #303133;\n        margin-bottom: 5px;\n    }\n    \n    .preview-price {\n        font-size: 14px;\n        color: #F56C6C;\n    }\n    \n    /* 交换请求管理弹窗样式 */\n    .request-card {\n        margin-bottom: 20px;\n    }\n    \n    .request-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 15px;\n    }\n    \n    .request-user {\n        display: flex;\n        align-items: center;\n    }\n    \n    .user-avatar {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        margin-right: 10px;\n    }\n    \n    .request-time {\n        color: #909399;\n        font-size: 14px;\n    }\n    \n    .request-content {\n        margin-bottom: 15px;\n    }\n    \n    .exchange-items {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 15px;\n    }\n    \n    .item-card {\n        flex: 1;\n        text-align: center;\n        padding: 10px;\n        border: 1px solid #EBEEF5;\n        border-radius: 4px;\n    }\n    \n    .item-title {\n        font-size: 14px;\n        color: #409EFF;\n        margin-bottom: 10px;\n    }\n    \n    .item-img {\n        width: 80px;\n        height: 80px;\n        object-fit: cover;\n        border-radius: 4px;\n        margin-bottom: 10px;\n    }\n    \n    .item-info {\n        text-align: center;\n    }\n    \n    .item-name {\n        font-size: 14px;\n        color: #303133;\n        margin-bottom: 5px;\n    }\n    \n    .item-price {\n        font-size: 14px;\n        color: #F56C6C;\n    }\n    \n    .request-reason {\n        background-color: #F5F7FA;\n        padding: 10px;\n        border-radius: 4px;\n    }\n    \n    .reason-title {\n        font-weight: bold;\n        margin-bottom: 5px;\n    }\n    \n    .reason-content {\n        color: #606266;\n    }\n    \n    .request-actions {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n    \n    .action-buttons {\n        display: flex;\n        gap: 10px;\n    }\n    \n    .empty-requests {\n        text-align: center;\n        padding: 30px;\n        color: #909399;\n    }\n    \n    .empty-requests i {\n        font-size: 48px;\n        margin-bottom: 10px;\n    }\n\n    /* 捐赠弹窗样式 */\n    .donation-preview-item {\n        margin-bottom: 15px;\n    }\n\n    .donation-notes {\n        background-color: #f8f8f8;\n        padding: 15px;\n        border-radius: 4px;\n        margin-top: 20px;\n        font-size: 14px;\n        color: #606266;\n    }\n\n    .donation-notes p {\n        margin: 5px 0;\n    }\n\n    .donation-notes i {\n        color: #E6A23C;\n        margin-right: 5px;\n    }\n</style>\n"]}]}