{"remainingRequest":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/-Second-hand-mall/node_modules/element-ui/packages/upload/src/upload.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/element-ui/packages/upload/src/upload.vue","mtime":1741743641104},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js","mtime":1741743640250},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js","mtime":1741743643788}],"contextDependencies":[],"result":["\nimport ajax from './ajax';\nimport UploadDragger from './upload-dragger.vue';\n\nexport default {\n  inject: ['uploader'],\n  components: {\n    UploadDragger\n  },\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      default: 'file'\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: Function,\n    onProgress: Function,\n    onSuccess: Function,\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function() {}\n    },\n    onRemove: {\n      type: Function,\n      default: function() {}\n    },\n    fileList: Array,\n    autoUpload: Boolean,\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: ajax\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function\n  },\n\n  data() {\n    return {\n      mouseover: false,\n      reqs: {}\n    };\n  },\n\n  methods: {\n    isImage(str) {\n      return str.indexOf('image') !== -1;\n    },\n    handleChange(ev) {\n      const files = ev.target.files;\n\n      if (!files) return;\n      this.uploadFiles(files);\n    },\n    uploadFiles(files) {\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList);\n        return;\n      }\n\n      let postFiles = Array.prototype.slice.call(files);\n      if (!this.multiple) { postFiles = postFiles.slice(0, 1); }\n\n      if (postFiles.length === 0) { return; }\n\n      postFiles.forEach(rawFile => {\n        this.onStart(rawFile);\n        if (this.autoUpload) this.upload(rawFile);\n      });\n    },\n    upload(rawFile) {\n      this.$refs.input.value = null;\n\n      if (!this.beforeUpload) {\n        return this.post(rawFile);\n      }\n\n      const before = this.beforeUpload(rawFile);\n      if (before && before.then) {\n        before.then(processedFile => {\n          const fileType = Object.prototype.toString.call(processedFile);\n\n          if (fileType === '[object File]' || fileType === '[object Blob]') {\n            if (fileType === '[object Blob]') {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n            for (const p in rawFile) {\n              if (rawFile.hasOwnProperty(p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n            this.post(processedFile);\n          } else {\n            this.post(rawFile);\n          }\n        }, () => {\n          this.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        this.post(rawFile);\n      } else {\n        this.onRemove(null, rawFile);\n      }\n    },\n    abort(file) {\n      const { reqs } = this;\n      if (file) {\n        let uid = file;\n        if (file.uid) uid = file.uid;\n        if (reqs[uid]) {\n          reqs[uid].abort();\n        }\n      } else {\n        Object.keys(reqs).forEach((uid) => {\n          if (reqs[uid]) reqs[uid].abort();\n          delete reqs[uid];\n        });\n      }\n    },\n    post(rawFile) {\n      const { uid } = rawFile;\n      const options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: e => {\n          this.onProgress(e, rawFile);\n        },\n        onSuccess: res => {\n          this.onSuccess(res, rawFile);\n          delete this.reqs[uid];\n        },\n        onError: err => {\n          this.onError(err, rawFile);\n          delete this.reqs[uid];\n        }\n      };\n      const req = this.httpRequest(options);\n      this.reqs[uid] = req;\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError);\n      }\n    },\n    handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n    handleKeydown(e) {\n      if (e.target !== e.currentTarget) return;\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick();\n      }\n    }\n  },\n\n  render(h) {\n    let {\n      handleClick,\n      drag,\n      name,\n      handleChange,\n      multiple,\n      accept,\n      listType,\n      uploadFiles,\n      disabled,\n      handleKeydown\n    } = this;\n    const data = {\n      class: {\n        'el-upload': true\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown\n      }\n    };\n    data.class[`el-upload--${listType}`] = true;\n    return (\n      <div {...data} tabindex=\"0\" >\n        {\n          drag\n            ? <upload-dragger disabled={disabled} on-file={uploadFiles}>{this.$slots.default}</upload-dragger>\n            : this.$slots.default\n        }\n        <input class=\"el-upload__input\" type=\"file\" ref=\"input\" name={name} on-change={handleChange} multiple={multiple} accept={accept}></input>\n      </div>\n    );\n  }\n};\n",null]}