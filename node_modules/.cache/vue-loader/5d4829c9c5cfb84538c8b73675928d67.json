{"remainingRequest":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/-Second-hand-mall/src/components/page/idle-details.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/macos/Desktop/-Second-hand-mall/src/components/page/idle-details.vue","mtime":1741856314712},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js","mtime":1741743640250},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js","mtime":1741743643788}],"contextDependencies":[],"result":["\n    import AppHead from '../common/AppHeader.vue';\n    import AppBody from '../common/AppPageBody.vue'\n    import AppFoot from '../common/AppFoot.vue'\n\n    export default {\n        name: \"idle-details\",\n        components: {\n            AppHead,\n            AppBody,\n            AppFoot\n        },\n        data() {\n            return {\n                buttonText:'编辑',\n                isEditing:false,\n                messageContent:'',\n                toUser:null,\n                toMessage:null,\n                isReply:false,\n                replyData:{\n                    toUserNickname:'',\n                    toMessage:''\n                },\n                messageList:[],\n                idleItemInfo:{\n                    id:'',\n                    idleName:'',\n                    idleDetails:'',\n                    pictureList:[],\n                    idlePrice:0,\n                    idlePlace:'',\n                    idleLabel:'',\n                    idleStatus:-1,\n                    userId:'',\n                    user:{\n                        avatar:'',\n                        nickname:'',\n                        signInTime:''\n                    },\n                },\n                editingIdleItem:null,\n                isMaster:false,\n                isFavorite:true,\n                favoriteId:0,\n                imageLoading: true,\n                loadedImages: 0,\n                totalImages: 0\n            };\n        },\n        computed: {\n            processedPictureList() {\n                if (!this.idleItemInfo.pictureList) return [];\n                if (typeof this.idleItemInfo.pictureList === 'string') {\n                    try {\n                        return JSON.parse(this.idleItemInfo.pictureList);\n                    } catch (e) {\n                        console.error('解析图片列表失败:', e);\n                        return [];\n                    }\n                }\n                return Array.isArray(this.idleItemInfo.pictureList) \n                    ? this.idleItemInfo.pictureList \n                    : [this.idleItemInfo.pictureList];\n            },\n            fileList() {\n                return this.processedPictureList.map(img => ({\n                    name: img,\n                    url: this.getImageUrl(img)\n                }));\n            }\n        },\n        created(){\n            this.getMyIdleById();\n        },\n        methods: {\n            getMyIdleById(){\n                this.imageLoading = true;\n                let id = this.$route.query.id;\n                this.$api.getIdleItem({\n                    id: id\n                }).then(res => {\n                    console.log('商品详情原始数据:', res);\n                    if (res.data) {\n                        // 处理商品详情的换行\n                        let list = res.data.idleDetails.split(/\\r?\\n/);\n                        let str = '';\n                        for (let i = 0; i < list.length; i++) {\n                            str += list[i];\n                        }\n                        res.data.idleDetails = str;\n\n                        // 处理图片列表\n                        try {\n                            if (typeof res.data.pictureList === 'string') {\n                                const pictureList = JSON.parse(res.data.pictureList);\n                                res.data.pictureList = Array.isArray(pictureList) ? pictureList : [pictureList];\n                            }\n                            console.log('处理后的图片列表:', res.data.pictureList);\n                        } catch (e) {\n                            console.error('解析图片列表失败:', e);\n                            res.data.pictureList = [];\n                        }\n\n                        this.idleItemInfo = res.data;\n                        this.totalImages = this.processedPictureList.length;\n                        this.loadedImages = 0;\n\n                        // 预加载图片\n                        this.processedPictureList.forEach(imgUrl => {\n                            const img = new Image();\n                            img.onload = () => {\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.onerror = (e) => {\n                                console.error('图片预加载失败:', imgUrl, e);\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.src = this.getImageUrl(imgUrl);\n                        });\n\n                        let userId = this.getCookie('shUserId');\n                        if (userId == this.idleItemInfo.userId) {\n                            this.isMaster = true;\n                        }\n                        this.checkFavorite();\n                        this.checkMyIdle();\n                        this.getAllIdleMessage();\n                    }\n                }).catch(error => {\n                    console.error('获取商品详情失败:', error);\n                    this.$message.error('获取商品详情失败，请重试');\n                    this.imageLoading = false;\n                });\n            },\n            saveChanges(idleItemInfo) {\n                const updatedInfo = {\n                    ...idleItemInfo,\n                    pictureList: JSON.stringify(this.idleItemInfo.pictureList),\n                };\n                // 这里添加调用API更新商品信息的逻辑\n                this.$api.updateIdleItem(updatedInfo).then(() => {\n                    // this.getMyIdleById();\n                    this.$message.success('商品信息更新成功');\n                    this.isEditing = false; // 保存后关闭编辑模式\n                    this.buttonText = '编辑商品'\n                }).catch(() => {\n                    this.$message.error('更新失败，请重试');\n                });\n            },\n            imgChange(file, fileList){\n                this.noneBtnImg = fileList.length >= this.limitCountImg;\n            },\n            fileHandleRemove(file,fileList) {\n                console.log(file, fileList);\n                // 修改：现在需要找到对应的本地路径\n                const urlToRemove = file.localPath || file.url; \n                // 在pictureList中查找对应项\n                const index = this.idleItemInfo.pictureList.indexOf(urlToRemove);\n                console.log(this)\n\n                if (index > -1) {\n                    // 找到了匹配的项，从idleItemInfo.pictureList中移除\n                    this.idleItemInfo.pictureList.splice(index, 1);\n                    this.$forceUpdate();\n                } else {\n                    console.warn('Path not found in the list to remove.');\n                }\n            },\n            fileHandlePreview(file) {\n                console.log(file);\n                // 修改：如果response.data是对象，则使用accessUrl\n                if(file.response && file.response.data) {\n                    const fileData = file.response.data;\n                    this.dialogImageUrl = fileData.accessUrl || fileData;\n                } else {\n                    this.dialogImageUrl = file.url;\n                }\n                this.imgDialogVisible=true;\n            },\n            fileHandleSuccess(response, file, fileList) {\n                console.log(\"file:\", response, file, fileList);\n                // 修改：现在response.data是一个包含localPath和accessUrl的对象\n                const fileData = response.data;\n                // 将本地路径添加到pictureList\n                this.idleItemInfo.pictureList.push(fileData.localPath);\n                // 但在界面展示时使用accessUrl\n                file.url = fileData.accessUrl;\n                file.localPath = fileData.localPath; // 保存本地路径便于后续操作\n            },\n            editButton(){\n                this.isEditing = !this.isEditing;\n                this.buttonText = '保存修改'\n            },\n            getAllIdleMessage(){\n                this.$api.getAllIdleMessage({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    console.log('getAllIdleMessage',res.data);\n                    if(res.status_code===1){\n                        this.messageList=res.data;\n                    }\n                }).catch(()=>{\n                })\n            },\n            checkFavorite(){\n                this.$api.checkFavorite({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if(!res.data){\n                        this.isFavorite=false;\n                    }else {\n                        this.favoriteId=res.data;\n                    }\n                })\n            },\n            checkMyIdle(){\n                this.$api.checkMyIdle({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if (res.data){\n                        this.isMaster = true;\n                    }else {\n                        this.isMaster = false;\n                    }\n                })\n            },\n            getCookie(cname){\n                var name = cname + \"=\";\n                var ca = document.cookie.split(';');\n                for(var i=0; i<ca.length; i++)\n                {\n                    var c = ca[i].trim();\n                    if (c.indexOf(name)===0) return c.substring(name.length,c.length);\n                }\n                return \"\";\n            },\n            replyMessage(index){\n                $('html,body').animate({\n                    scrollTop: $(\"#replyMessageLocation\").offset().top-600\n                }, {duration: 500, easing: \"swing\"});\n                this.isReply=true;\n                this.replyData.toUserNickname=this.messageList[index].fromU.nickname;\n                this.replyData.toMessage=this.messageList[index].content.substring(0,10)+(this.messageList[index].content.length>10?'...':'');\n                this.toUser=this.messageList[index].userId;\n                this.toMessage=this.messageList[index].id;\n            },\n            changeStatus(idle,status){\n                this.$api.updateIdleItem({\n                    id:idle.id,\n                    idleStatus:status\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.idleItemInfo.idleStatus=status;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                });\n            },\n            buyButton(idleItemInfo){\n                this.$api.addOrder({\n                    idleId:idleItemInfo.id,\n                    orderPrice:idleItemInfo.idlePrice,\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.$router.push({path: '/order', query: {id: res.data.id}});\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e=>{\n\n                })\n            },\n            favoriteButton(idleItemInfo){\n                if(this.isFavorite){\n                    this.$api.deleteFavorite({\n                        id: this.favoriteId\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已取消收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=false;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }else {\n                    this.$api.addFavorite({\n                        idleId:idleItemInfo.id\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已加入收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=true;\n                            this.favoriteId=res.data;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }\n            },\n            cancelReply(){\n                this.isReply=false;\n                this.toUser=this.idleItemInfo.userId;\n                this.toMessage=null;\n                this.replyData.toUserNickname='';\n                this.replyData.toMessage='';\n            },\n\n            sendMessage(){\n                let content=this.messageContent.trim();\n                if(this.toUser==null){\n                    this.toUser=this.idleItemInfo.userId;\n                }\n                if(content){\n                    let contentList=content.split(/\\r?\\n/);\n                    let contenHtml=contentList[0];\n                    for(let i=1;i<contentList.length;i++){\n                        contenHtml+='<br>'+contentList[i];\n                    }\n                    this.$api.sendMessage({\n                        idleId:this.idleItemInfo.id,\n                        content:contenHtml,\n                        toUser:this.toUser,\n                        toMessage:this.toMessage\n                    }).then(res=>{\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '留言成功！',\n                                type: 'success'\n                            });\n                            this.messageContent='';\n                            this.cancelReply();\n                            this.getAllIdleMessage();\n                        }else {\n                            this.$message.error(\"留言失败！\"+res.msg);\n                        }\n                    }).catch(()=>{\n                        this.$message.error(\"留言失败！\");\n                    });\n\n                }else{\n                    this.$message.error(\"留言为空！\");\n                }\n            },\n            getImageUrl(url) {\n                // 检查url是否已经是HTTP URL\n                if (url && (url.startsWith('http://') || url.startsWith('https://'))) {\n                    return url;\n                }\n                \n                // 检查url是否是一个本地文件路径\n                if (url && (url.startsWith('/') || url.startsWith('D:') || url.includes('\\\\') || url.includes('/'))) {\n                    // 如果是本地路径，则转换为服务器URL\n                    // 这里假设文件名是路径最后的部分\n                    const fileName = url.split(/[/\\\\]/).pop();\n                    // 构建访问URL\n                    return `http://localhost:8082/image?imageName=${fileName}`;\n                }\n                \n                // 如果是简单的文件名，直接构建访问URL\n                if (url && url.trim() !== '') {\n                    return `http://localhost:8082/image?imageName=${url}`;\n                }\n                \n                // 其他情况直接返回\n                return url;\n            },\n            handleImageLoad() {\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            handleImageError(e) {\n                console.error('图片加载失败:', e);\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            beforeUpload(file) {\n                const isImage = file.type.startsWith('image/');\n                const isLt2M = file.size / 1024 / 1024 < 2;\n\n                if (!isImage) {\n                    this.$message.error('只能上传图片文件!');\n                    return false;\n                }\n                if (!isLt2M) {\n                    this.$message.error('图片大小不能超过 2MB!');\n                    return false;\n                }\n                return true;\n            },\n        },\n    }\n",{"version":3,"sources":["idle-details.vue"],"names":[],"mappingsfile":"idle-details.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div>\n        <app-head></app-head>\n        <app-body>\n            <div class=\"idle-details-container\">\n                <div class=\"details-header\">\n                    <div class=\"details-header-user-info\">\n                        <el-image\n                                style=\"width: 80px; height: 80px;border-radius: 5px;\"\n                                :src=\"idleItemInfo.user.avatar\"\n                                fit=\"contain\"></el-image>\n                        <div style=\"margin-left: 10px;\">\n                            <div class=\"details-header-user-info-nickname\">{{idleItemInfo.user.nickname}}</div>\n                            <div class=\"details-header-user-info-time\">{{idleItemInfo.user.signInTime.substring(0,10)}} 加入平台</div>\n                        </div>\n                    </div>\n                    <div class=\"details-header-buy\" :style=\"'width:'+(isMaster?'250px;':'280px;')\">\n                        <div v-show=\"idleItemInfo.idlePrice !== 0\" style=\"color: red;font-size: 18px;font-weight: 600;\">￥{{idleItemInfo.idlePrice}}</div>\n                        <div v-if=\"!isMaster&&idleItemInfo.idleStatus!==1\" style=\"color: red;font-size: 16px;\">闲置已下架或删除</div>\n                        <el-button v-show=\"idleItemInfo.idlePrice > 0\" v-if=\"!isMaster&&idleItemInfo.idleStatus===1\" type=\"danger\" plain @click=\"buyButton(idleItemInfo)\">立即购买</el-button>\n                        <el-button v-show=\"idleItemInfo.idlePrice > 0\" v-if=\"!isMaster&&idleItemInfo.idleStatus===1\" type=\"primary\" plain @click=\"favoriteButton(idleItemInfo)\">{{isFavorite?'取消收藏':'加入收藏'}}</el-button>\n                        <el-button\n                            v-show='idleItemInfo.idlePrice >= 0'\n                            v-if=\"isMaster&&idleItemInfo.idleStatus===1\"\n                            type='primary'\n                            plain\n                            @click=\"isEditing ? saveChanges(idleItemInfo) : editButton()\">{{ buttonText }}</el-button>\n                        <el-button v-if=\"isMaster&&idleItemInfo.idleStatus===1\" type=\"danger\" @click=\"changeStatus(idleItemInfo,2)\" plain>下架</el-button>\n                        <el-button v-if=\"isMaster&&idleItemInfo.idleStatus===2\" type=\"primary\" @click=\"changeStatus(idleItemInfo,1)\" plain>重新上架</el-button>\n                    </div>\n                </div>\n\n\n                <div class=\"details-info\">\n\n                    <div v-if=\"isEditing\">\n                        <label class=\"input-label\">价格</label>\n                        <el-input v-model=\"idleItemInfo.idlePrice\" placeholder=\"请输入商品价格\"></el-input>\n                    </div>\n                    <div class=\"details-info-title\" v-if=\"isEditing\">\n                        <label class=\"input-label\">名称</label>\n                        <el-input v-model=\"idleItemInfo.idleName\" placeholder=\"请输入商品名称\"></el-input>\n                    </div>\n                    <div class=\"details-info-title\" v-else>\n                        {{idleItemInfo.idleName}}\n                    </div>\n                    <div v-if=\"isEditing\">\n                        <label class=\"input-label\">详情</label>\n                        <el-input type=\"textarea\" autosize placeholder=\"请输入商品详情...\" v-model=\"idleItemInfo.idleDetails\"></el-input>\n                    </div>\n                    <div class=\"details-info-main\" v-else v-html=\"idleItemInfo.idleDetails\"></div>\n                    <div class=\"details-picture\">\n                        <template v-if=\"isEditing\">\n                            <!-- 编辑模式下的上传控件 -->\n                            <el-upload\n                                :on-remove=\"fileHandleRemove\"\n                                :on-success=\"fileHandleSuccess\"\n                                :on-change=\"imgChange\"\n                                action=\"http://localhost:8082/file\"\n                                list-type=\"picture-card\"\n                                :file-list=\"fileList\"\n                                :before-upload=\"beforeUpload\"\n                            >\n                                <i class=\"el-icon-plus\"></i>\n                            </el-upload>\n                        </template>\n                        <template v-else>\n                            <!-- 显示模式下的图片列表 -->\n                            <div v-loading=\"imageLoading\" class=\"image-container\">\n                                <el-image\n                                    v-for=\"(imgUrl, i) in processedPictureList\"\n                                    :key=\"i\"\n                                    style=\"width: 90%; margin-bottom: 2px;\"\n                                    :src=\"getImageUrl(imgUrl)\"\n                                    fit=\"contain\"\n                                    @load=\"handleImageLoad\"\n                                    @error=\"handleImageError\"\n                                >\n                                    <div slot=\"error\" class=\"image-slot\">\n                                        <i class=\"el-icon-picture-outline\"></i>\n                                        <p>图片加载失败</p>\n                                    </div>\n                                </el-image>\n                            </div>\n                            <div v-if=\"!processedPictureList.length\" class=\"no-image\">\n                                <i class=\"el-icon-picture-outline\"></i>\n                                <p>暂无图片</p>\n                            </div>\n                        </template>\n                    </div>\n                </div>\n\n                <div class=\"message-container\" id=\"replyMessageLocation\">\n                    <div class=\"message-title\">全部留言</div>\n                    <div class=\"message-send\">\n                        <div v-if=\"isReply\" style=\"padding-bottom: 10px;\">\n                            <el-button type=\"info\" @click=\"cancelReply\">回复：{{replyData.toMessage}} @{{replyData.toUserNickname}} <i class=\"el-icon-close el-icon--right\"></i></el-button>\n                        </div>\n                        <el-input\n                                type=\"textarea\"\n                                autosize\n                                placeholder=\"留言提问...\"\n                                v-model=\"messageContent\"\n                                maxlength=\"200\"\n                                show-word-limit>\n                        </el-input>\n                        <div class=\"message-send-button\">\n                            <el-button plain @click=\"sendMessage\">发送留言</el-button>\n                        </div>\n                    </div>\n                    <div>\n                        <div v-for=\"(mes,index) in messageList\" class=\"message-container-list\">\n                            <div class=\"message-container-list-left\">\n                                <el-image\n                                        style=\"width: 55px; height: 55px;border-radius: 5px;\"\n                                        :src=\"mes.fromU.avatar\"\n                                        fit=\"contain\"></el-image>\n                                <div class=\"message-container-list-text\">\n                                    <div class=\"message-nickname\">{{mes.fromU.nickname}}\n                                        {{mes.toU.nickname?' @'+mes.toU.nickname+'：'+\n                                        mes.toM.content.substring(0,10)+\n                                        (mes.toM.content.length>10?'...':''):''}}</div>\n                                    <div class=\"message-content\" v-html=\"mes.content\"></div>\n                                    <div class=\"message-time\">{{mes.createTime}}</div>\n                                </div>\n                            </div>\n                            <div class=\"message-container-list-right\">\n                                <el-button style=\"float: right;\"  plain @click=\"replyMessage(index)\">回复</el-button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <app-foot></app-foot>\n        </app-body>\n    </div>\n</template>\n\n<script>\n    import AppHead from '../common/AppHeader.vue';\n    import AppBody from '../common/AppPageBody.vue'\n    import AppFoot from '../common/AppFoot.vue'\n\n    export default {\n        name: \"idle-details\",\n        components: {\n            AppHead,\n            AppBody,\n            AppFoot\n        },\n        data() {\n            return {\n                buttonText:'编辑',\n                isEditing:false,\n                messageContent:'',\n                toUser:null,\n                toMessage:null,\n                isReply:false,\n                replyData:{\n                    toUserNickname:'',\n                    toMessage:''\n                },\n                messageList:[],\n                idleItemInfo:{\n                    id:'',\n                    idleName:'',\n                    idleDetails:'',\n                    pictureList:[],\n                    idlePrice:0,\n                    idlePlace:'',\n                    idleLabel:'',\n                    idleStatus:-1,\n                    userId:'',\n                    user:{\n                        avatar:'',\n                        nickname:'',\n                        signInTime:''\n                    },\n                },\n                editingIdleItem:null,\n                isMaster:false,\n                isFavorite:true,\n                favoriteId:0,\n                imageLoading: true,\n                loadedImages: 0,\n                totalImages: 0\n            };\n        },\n        computed: {\n            processedPictureList() {\n                if (!this.idleItemInfo.pictureList) return [];\n                if (typeof this.idleItemInfo.pictureList === 'string') {\n                    try {\n                        return JSON.parse(this.idleItemInfo.pictureList);\n                    } catch (e) {\n                        console.error('解析图片列表失败:', e);\n                        return [];\n                    }\n                }\n                return Array.isArray(this.idleItemInfo.pictureList) \n                    ? this.idleItemInfo.pictureList \n                    : [this.idleItemInfo.pictureList];\n            },\n            fileList() {\n                return this.processedPictureList.map(img => ({\n                    name: img,\n                    url: this.getImageUrl(img)\n                }));\n            }\n        },\n        created(){\n            this.getMyIdleById();\n        },\n        methods: {\n            getMyIdleById(){\n                this.imageLoading = true;\n                let id = this.$route.query.id;\n                this.$api.getIdleItem({\n                    id: id\n                }).then(res => {\n                    console.log('商品详情原始数据:', res);\n                    if (res.data) {\n                        // 处理商品详情的换行\n                        let list = res.data.idleDetails.split(/\\r?\\n/);\n                        let str = '';\n                        for (let i = 0; i < list.length; i++) {\n                            str += list[i];\n                        }\n                        res.data.idleDetails = str;\n\n                        // 处理图片列表\n                        try {\n                            if (typeof res.data.pictureList === 'string') {\n                                const pictureList = JSON.parse(res.data.pictureList);\n                                res.data.pictureList = Array.isArray(pictureList) ? pictureList : [pictureList];\n                            }\n                            console.log('处理后的图片列表:', res.data.pictureList);\n                        } catch (e) {\n                            console.error('解析图片列表失败:', e);\n                            res.data.pictureList = [];\n                        }\n\n                        this.idleItemInfo = res.data;\n                        this.totalImages = this.processedPictureList.length;\n                        this.loadedImages = 0;\n\n                        // 预加载图片\n                        this.processedPictureList.forEach(imgUrl => {\n                            const img = new Image();\n                            img.onload = () => {\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.onerror = (e) => {\n                                console.error('图片预加载失败:', imgUrl, e);\n                                this.loadedImages++;\n                                if (this.loadedImages >= this.totalImages) {\n                                    this.imageLoading = false;\n                                }\n                            };\n                            img.src = this.getImageUrl(imgUrl);\n                        });\n\n                        let userId = this.getCookie('shUserId');\n                        if (userId == this.idleItemInfo.userId) {\n                            this.isMaster = true;\n                        }\n                        this.checkFavorite();\n                        this.checkMyIdle();\n                        this.getAllIdleMessage();\n                    }\n                }).catch(error => {\n                    console.error('获取商品详情失败:', error);\n                    this.$message.error('获取商品详情失败，请重试');\n                    this.imageLoading = false;\n                });\n            },\n            saveChanges(idleItemInfo) {\n                const updatedInfo = {\n                    ...idleItemInfo,\n                    pictureList: JSON.stringify(this.idleItemInfo.pictureList),\n                };\n                // 这里添加调用API更新商品信息的逻辑\n                this.$api.updateIdleItem(updatedInfo).then(() => {\n                    // this.getMyIdleById();\n                    this.$message.success('商品信息更新成功');\n                    this.isEditing = false; // 保存后关闭编辑模式\n                    this.buttonText = '编辑商品'\n                }).catch(() => {\n                    this.$message.error('更新失败，请重试');\n                });\n            },\n            imgChange(file, fileList){\n                this.noneBtnImg = fileList.length >= this.limitCountImg;\n            },\n            fileHandleRemove(file,fileList) {\n                console.log(file, fileList);\n                // 修改：现在需要找到对应的本地路径\n                const urlToRemove = file.localPath || file.url; \n                // 在pictureList中查找对应项\n                const index = this.idleItemInfo.pictureList.indexOf(urlToRemove);\n                console.log(this)\n\n                if (index > -1) {\n                    // 找到了匹配的项，从idleItemInfo.pictureList中移除\n                    this.idleItemInfo.pictureList.splice(index, 1);\n                    this.$forceUpdate();\n                } else {\n                    console.warn('Path not found in the list to remove.');\n                }\n            },\n            fileHandlePreview(file) {\n                console.log(file);\n                // 修改：如果response.data是对象，则使用accessUrl\n                if(file.response && file.response.data) {\n                    const fileData = file.response.data;\n                    this.dialogImageUrl = fileData.accessUrl || fileData;\n                } else {\n                    this.dialogImageUrl = file.url;\n                }\n                this.imgDialogVisible=true;\n            },\n            fileHandleSuccess(response, file, fileList) {\n                console.log(\"file:\", response, file, fileList);\n                // 修改：现在response.data是一个包含localPath和accessUrl的对象\n                const fileData = response.data;\n                // 将本地路径添加到pictureList\n                this.idleItemInfo.pictureList.push(fileData.localPath);\n                // 但在界面展示时使用accessUrl\n                file.url = fileData.accessUrl;\n                file.localPath = fileData.localPath; // 保存本地路径便于后续操作\n            },\n            editButton(){\n                this.isEditing = !this.isEditing;\n                this.buttonText = '保存修改'\n            },\n            getAllIdleMessage(){\n                this.$api.getAllIdleMessage({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    console.log('getAllIdleMessage',res.data);\n                    if(res.status_code===1){\n                        this.messageList=res.data;\n                    }\n                }).catch(()=>{\n                })\n            },\n            checkFavorite(){\n                this.$api.checkFavorite({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if(!res.data){\n                        this.isFavorite=false;\n                    }else {\n                        this.favoriteId=res.data;\n                    }\n                })\n            },\n            checkMyIdle(){\n                this.$api.checkMyIdle({\n                    idleId:this.idleItemInfo.id\n                }).then(res=>{\n                    if (res.data){\n                        this.isMaster = true;\n                    }else {\n                        this.isMaster = false;\n                    }\n                })\n            },\n            getCookie(cname){\n                var name = cname + \"=\";\n                var ca = document.cookie.split(';');\n                for(var i=0; i<ca.length; i++)\n                {\n                    var c = ca[i].trim();\n                    if (c.indexOf(name)===0) return c.substring(name.length,c.length);\n                }\n                return \"\";\n            },\n            replyMessage(index){\n                $('html,body').animate({\n                    scrollTop: $(\"#replyMessageLocation\").offset().top-600\n                }, {duration: 500, easing: \"swing\"});\n                this.isReply=true;\n                this.replyData.toUserNickname=this.messageList[index].fromU.nickname;\n                this.replyData.toMessage=this.messageList[index].content.substring(0,10)+(this.messageList[index].content.length>10?'...':'');\n                this.toUser=this.messageList[index].userId;\n                this.toMessage=this.messageList[index].id;\n            },\n            changeStatus(idle,status){\n                this.$api.updateIdleItem({\n                    id:idle.id,\n                    idleStatus:status\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.idleItemInfo.idleStatus=status;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                });\n            },\n            buyButton(idleItemInfo){\n                this.$api.addOrder({\n                    idleId:idleItemInfo.id,\n                    orderPrice:idleItemInfo.idlePrice,\n                }).then(res=>{\n                    console.log(res);\n                    if(res.status_code===1){\n                        this.$router.push({path: '/order', query: {id: res.data.id}});\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e=>{\n\n                })\n            },\n            favoriteButton(idleItemInfo){\n                if(this.isFavorite){\n                    this.$api.deleteFavorite({\n                        id: this.favoriteId\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已取消收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=false;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }else {\n                    this.$api.addFavorite({\n                        idleId:idleItemInfo.id\n                    }).then(res=>{\n                        console.log(res);\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '已加入收藏！',\n                                type: 'success'\n                            });\n                            this.isFavorite=true;\n                            this.favoriteId=res.data;\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e=>{\n                    })\n                }\n            },\n            cancelReply(){\n                this.isReply=false;\n                this.toUser=this.idleItemInfo.userId;\n                this.toMessage=null;\n                this.replyData.toUserNickname='';\n                this.replyData.toMessage='';\n            },\n\n            sendMessage(){\n                let content=this.messageContent.trim();\n                if(this.toUser==null){\n                    this.toUser=this.idleItemInfo.userId;\n                }\n                if(content){\n                    let contentList=content.split(/\\r?\\n/);\n                    let contenHtml=contentList[0];\n                    for(let i=1;i<contentList.length;i++){\n                        contenHtml+='<br>'+contentList[i];\n                    }\n                    this.$api.sendMessage({\n                        idleId:this.idleItemInfo.id,\n                        content:contenHtml,\n                        toUser:this.toUser,\n                        toMessage:this.toMessage\n                    }).then(res=>{\n                        if(res.status_code===1){\n                            this.$message({\n                                message: '留言成功！',\n                                type: 'success'\n                            });\n                            this.messageContent='';\n                            this.cancelReply();\n                            this.getAllIdleMessage();\n                        }else {\n                            this.$message.error(\"留言失败！\"+res.msg);\n                        }\n                    }).catch(()=>{\n                        this.$message.error(\"留言失败！\");\n                    });\n\n                }else{\n                    this.$message.error(\"留言为空！\");\n                }\n            },\n            getImageUrl(url) {\n                // 检查url是否已经是HTTP URL\n                if (url && (url.startsWith('http://') || url.startsWith('https://'))) {\n                    return url;\n                }\n                \n                // 检查url是否是一个本地文件路径\n                if (url && (url.startsWith('/') || url.startsWith('D:') || url.includes('\\\\') || url.includes('/'))) {\n                    // 如果是本地路径，则转换为服务器URL\n                    // 这里假设文件名是路径最后的部分\n                    const fileName = url.split(/[/\\\\]/).pop();\n                    // 构建访问URL\n                    return `http://localhost:8082/image?imageName=${fileName}`;\n                }\n                \n                // 如果是简单的文件名，直接构建访问URL\n                if (url && url.trim() !== '') {\n                    return `http://localhost:8082/image?imageName=${url}`;\n                }\n                \n                // 其他情况直接返回\n                return url;\n            },\n            handleImageLoad() {\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            handleImageError(e) {\n                console.error('图片加载失败:', e);\n                this.loadedImages++;\n                if (this.loadedImages >= this.totalImages) {\n                    this.imageLoading = false;\n                }\n            },\n            beforeUpload(file) {\n                const isImage = file.type.startsWith('image/');\n                const isLt2M = file.size / 1024 / 1024 < 2;\n\n                if (!isImage) {\n                    this.$message.error('只能上传图片文件!');\n                    return false;\n                }\n                if (!isLt2M) {\n                    this.$message.error('图片大小不能超过 2MB!');\n                    return false;\n                }\n                return true;\n            },\n        },\n    }\n</script>\n\n<style scoped>\n    .idle-details-container {\n        min-height: 85vh;\n    }\n\n    .details-header {\n        height: 80px;\n        border-bottom: 10px solid #f6f6f6;\n        display: flex;\n        justify-content: space-between;\n        padding: 20px;\n        align-items: center;\n    }\n\n    .details-header-user-info {\n        display: flex;\n    }\n\n    .details-header-user-info-nickname {\n        font-weight: 600;\n        font-size: 18px;\n        margin-bottom: 10px;\n    }\n\n    .details-header-user-info-time {\n        font-size: 12px;\n        color: #555555;\n    }\n\n    .details-header-buy {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        height: 50px;\n        width: 280px;\n    }\n\n    .details-info {\n        padding: 20px 50px;\n    }\n\n    .details-info-title {\n        font-size: 22px;\n        font-weight: 600;\n        margin-bottom: 20px;\n\n    }\n\n    .details-info-main {\n        font-size: 17px;\n        color: #121212;\n        line-height: 160%;\n    }\n\n    .details-picture {\n        margin: 20px 0;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .message-container {\n        min-height: 100px;\n        border-top: 10px solid #f6f6f6;\n        padding: 20px;\n    }\n\n    .message-title {\n        font-size: 20px;\n        font-weight: 600;\n        margin-bottom: 20px;\n    }\n    .message-send{\n        min-height: 60px;\n    }\n    .message-send-button{\n        margin-top: 10px;\n        display: flex;\n        justify-content: flex-end;\n    }\n    .message-container-list{\n        min-height: 60px;\n        border-top: 1px solid #eeeeee;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 15px 0;\n    }\n    .message-container-list:first-child{\n        border-top:none;\n    }\n    .message-container-list-left{\n        width: 850px;\n        display: flex;\n    }\n    .message-container-list-right{\n        width: 100px;\n    }\n    .message-container-list-text{\n        margin-left: 10px;\n    }\n    .message-nickname{\n        font-weight: 600;\n        font-size: 18px;\n        padding-bottom: 5px;\n    }\n    .message-content{\n        font-size: 16px;\n        padding-bottom: 15px;\n        color: #555555;\n        width: 770px;\n    }\n    .message-time{\n        font-size: 13px;\n        color: #555555;\n    }\n    .image-container {\n        width: 100%;\n        min-height: 200px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .no-image {\n        text-align: center;\n        padding: 40px;\n        color: #909399;\n    }\n\n    .no-image i {\n        font-size: 48px;\n        margin-bottom: 10px;\n    }\n\n    .image-slot {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        background: #f5f7fa;\n        color: #909399;\n    }\n\n    .image-slot i {\n        font-size: 24px;\n        margin-bottom: 10px;\n    }\n</style>\n"]}]}