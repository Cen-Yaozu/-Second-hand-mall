{"remainingRequest":"D:\\Desktop\\-Second-hand-mall\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Desktop\\-Second-hand-mall\\node_modules\\element-ui\\packages\\progress\\src\\progress.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\element-ui\\packages\\progress\\src\\progress.vue","mtime":1741229038490},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741229036518},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\babel-loader\\lib\\index.js","mtime":1741229036772},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741229036518},{"path":"D:\\Desktop\\-Second-hand-mall\\node_modules\\vue-loader\\lib\\index.js","mtime":1741229036465}],"contextDependencies":[],"result":["\n  export default {\n    name: 'ElProgress',\n    props: {\n      type: {\n        type: String,\n        default: 'line',\n        validator: val => ['line', 'circle', 'dashboard'].indexOf(val) > -1\n      },\n      percentage: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: val => val >= 0 && val <= 100\n      },\n      status: {\n        type: String,\n        validator: val => ['success', 'exception', 'warning'].indexOf(val) > -1\n      },\n      strokeWidth: {\n        type: Number,\n        default: 6\n      },\n      strokeLinecap: {\n        type: String,\n        default: 'round'\n      },\n      textInside: {\n        type: Boolean,\n        default: false\n      },\n      width: {\n        type: Number,\n        default: 126\n      },\n      showText: {\n        type: Boolean,\n        default: true\n      },\n      color: {\n        type: [String, Array, Function],\n        default: ''\n      },\n      defineBackColor: {\n        type: [String, Array, Function],\n        default: '#ebeef5'\n      },\n      textColor: {\n        type: [String, Array, Function],\n        default: '#606266'\n      },\n      format: Function\n    },\n    computed: {\n      barStyle() {\n        const style = {};\n        style.width = this.percentage + '%';\n        style.backgroundColor = this.getCurrentColor(this.percentage);\n        return style;\n      },\n      relativeStrokeWidth() {\n        return (this.strokeWidth / this.width * 100).toFixed(1);\n      },\n      radius() {\n        if (this.type === 'circle' || this.type === 'dashboard') {\n          return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);\n        } else {\n          return 0;\n        }\n      },\n      trackPath() {\n        const radius = this.radius;\n        const isDashboard = this.type === 'dashboard';\n        return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${radius}\n          a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '-' : ''}${radius * 2}\n          a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '' : '-'}${radius * 2}\n          `;\n      },\n      perimeter() {\n        return 2 * Math.PI * this.radius;\n      },\n      rate() {\n        return this.type === 'dashboard' ? 0.75 : 1;\n      },\n      strokeDashoffset() {\n        const offset = -1 * this.perimeter * (1 - this.rate) / 2;\n        return `${offset}px`;\n      },\n      trailPathStyle() {\n        return {\n          strokeDasharray: `${(this.perimeter * this.rate)}px, ${this.perimeter}px`,\n          strokeDashoffset: this.strokeDashoffset\n        };\n      },\n      circlePathStyle() {\n        return {\n          strokeDasharray: `${this.perimeter * this.rate * (this.percentage / 100) }px, ${this.perimeter}px`,\n          strokeDashoffset: this.strokeDashoffset,\n          transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease'\n        };\n      },\n      stroke() {\n        let ret;\n        if (this.color) {\n          ret = this.getCurrentColor(this.percentage);\n        } else {\n          switch (this.status) {\n            case 'success':\n              ret = '#13ce66';\n              break;\n            case 'exception':\n              ret = '#ff4949';\n              break;\n            case 'warning':\n              ret = '#e6a23c';\n              break;\n            default:\n              ret = '#20a0ff';\n          }\n        }\n        return ret;\n      },\n      iconClass() {\n        if (this.status === 'warning') {\n          return 'el-icon-warning';\n        }\n        if (this.type === 'line') {\n          return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-close';\n        } else {\n          return this.status === 'success' ? 'el-icon-check' : 'el-icon-close';\n        }\n      },\n      progressTextSize() {\n        return this.type === 'line'\n          ? 12 + this.strokeWidth * 0.4\n          : this.width * 0.111111 + 2 ;\n      },\n      content() {\n        if (typeof this.format === 'function') {\n          return this.format(this.percentage) || '';\n        } else {\n          return `${this.percentage}%`;\n        }\n      }\n    },\n    methods: {\n      getCurrentColor(percentage) {\n        if (typeof this.color === 'function') {\n          return this.color(percentage);\n        } else if (typeof this.color === 'string') {\n          return this.color;\n        } else {\n          return this.getLevelColor(percentage);\n        }\n      },\n      getLevelColor(percentage) {\n        const colorArray = this.getColorArray().sort((a, b) => a.percentage - b.percentage);\n\n        for (let i = 0; i < colorArray.length; i++) {\n          if (colorArray[i].percentage > percentage) {\n            return colorArray[i].color;\n          }\n        }\n        return colorArray[colorArray.length - 1].color;\n      },\n      getColorArray() {\n        const color = this.color;\n        const span = 100 / color.length;\n        return color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n          return seriesColor;\n        });\n      }\n    }\n  };\n",{"version":3,"sources":["progress.vue"],"names":[],"mappings":";AAqfile":"progress.vue","sourceRoot":"node_modules/element-ui/packages/progress/src","sourcesContent":["<template>\n  <div\n    class=\"el-progress\"\n    :class=\"[\n      'el-progress--' + type,\n      status ? 'is-' + status : '',\n      {\n        'el-progress--without-text': !showText,\n        'el-progress--text-inside': textInside,\n      }\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div class=\"el-progress-bar\" v-if=\"type === 'line'\">\n      <div class=\"el-progress-bar__outer\" :style=\"{height: strokeWidth + 'px', backgroundColor:defineBackColor}\">\n        <div class=\"el-progress-bar__inner\" :style=\"barStyle\">\n          <div class=\"el-progress-bar__innerText\" :style=\"{color:textColor}\" v-if=\"showText && textInside\">{{content}}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"el-progress-circle\" :style=\"{height: width + 'px', width: width + 'px'}\" v-else>\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          class=\"el-progress-circle__track\"\n          :d=\"trackPath\"\n          :stroke=\"defineBackColor\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"></path>\n        <path\n          class=\"el-progress-circle__path\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"percentage ? relativeStrokeWidth : 0\"\n          :style=\"circlePathStyle\"></path>\n      </svg>\n    </div>\n    <div\n      class=\"el-progress__text\"\n      v-if=\"showText && !textInside\"\n      :style=\"{fontSize: progressTextSize + 'px', color:textColor}\"\n    >\n      <template v-if=\"!status\">{{content}}</template>\n      <i v-else :class=\"iconClass\"></i>\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'ElProgress',\n    props: {\n      type: {\n        type: String,\n        default: 'line',\n        validator: val => ['line', 'circle', 'dashboard'].indexOf(val) > -1\n      },\n      percentage: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: val => val >= 0 && val <= 100\n      },\n      status: {\n        type: String,\n        validator: val => ['success', 'exception', 'warning'].indexOf(val) > -1\n      },\n      strokeWidth: {\n        type: Number,\n        default: 6\n      },\n      strokeLinecap: {\n        type: String,\n        default: 'round'\n      },\n      textInside: {\n        type: Boolean,\n        default: false\n      },\n      width: {\n        type: Number,\n        default: 126\n      },\n      showText: {\n        type: Boolean,\n        default: true\n      },\n      color: {\n        type: [String, Array, Function],\n        default: ''\n      },\n      defineBackColor: {\n        type: [String, Array, Function],\n        default: '#ebeef5'\n      },\n      textColor: {\n        type: [String, Array, Function],\n        default: '#606266'\n      },\n      format: Function\n    },\n    computed: {\n      barStyle() {\n        const style = {};\n        style.width = this.percentage + '%';\n        style.backgroundColor = this.getCurrentColor(this.percentage);\n        return style;\n      },\n      relativeStrokeWidth() {\n        return (this.strokeWidth / this.width * 100).toFixed(1);\n      },\n      radius() {\n        if (this.type === 'circle' || this.type === 'dashboard') {\n          return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);\n        } else {\n          return 0;\n        }\n      },\n      trackPath() {\n        const radius = this.radius;\n        const isDashboard = this.type === 'dashboard';\n        return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${radius}\n          a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '-' : ''}${radius * 2}\n          a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '' : '-'}${radius * 2}\n          `;\n      },\n      perimeter() {\n        return 2 * Math.PI * this.radius;\n      },\n      rate() {\n        return this.type === 'dashboard' ? 0.75 : 1;\n      },\n      strokeDashoffset() {\n        const offset = -1 * this.perimeter * (1 - this.rate) / 2;\n        return `${offset}px`;\n      },\n      trailPathStyle() {\n        return {\n          strokeDasharray: `${(this.perimeter * this.rate)}px, ${this.perimeter}px`,\n          strokeDashoffset: this.strokeDashoffset\n        };\n      },\n      circlePathStyle() {\n        return {\n          strokeDasharray: `${this.perimeter * this.rate * (this.percentage / 100) }px, ${this.perimeter}px`,\n          strokeDashoffset: this.strokeDashoffset,\n          transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease'\n        };\n      },\n      stroke() {\n        let ret;\n        if (this.color) {\n          ret = this.getCurrentColor(this.percentage);\n        } else {\n          switch (this.status) {\n            case 'success':\n              ret = '#13ce66';\n              break;\n            case 'exception':\n              ret = '#ff4949';\n              break;\n            case 'warning':\n              ret = '#e6a23c';\n              break;\n            default:\n              ret = '#20a0ff';\n          }\n        }\n        return ret;\n      },\n      iconClass() {\n        if (this.status === 'warning') {\n          return 'el-icon-warning';\n        }\n        if (this.type === 'line') {\n          return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-close';\n        } else {\n          return this.status === 'success' ? 'el-icon-check' : 'el-icon-close';\n        }\n      },\n      progressTextSize() {\n        return this.type === 'line'\n          ? 12 + this.strokeWidth * 0.4\n          : this.width * 0.111111 + 2 ;\n      },\n      content() {\n        if (typeof this.format === 'function') {\n          return this.format(this.percentage) || '';\n        } else {\n          return `${this.percentage}%`;\n        }\n      }\n    },\n    methods: {\n      getCurrentColor(percentage) {\n        if (typeof this.color === 'function') {\n          return this.color(percentage);\n        } else if (typeof this.color === 'string') {\n          return this.color;\n        } else {\n          return this.getLevelColor(percentage);\n        }\n      },\n      getLevelColor(percentage) {\n        const colorArray = this.getColorArray().sort((a, b) => a.percentage - b.percentage);\n\n        for (let i = 0; i < colorArray.length; i++) {\n          if (colorArray[i].percentage > percentage) {\n            return colorArray[i].color;\n          }\n        }\n        return colorArray[colorArray.length - 1].color;\n      },\n      getColorArray() {\n        const color = this.color;\n        const span = 100 / color.length;\n        return color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n          return seriesColor;\n        });\n      }\n    }\n  };\n</script>\n"]}]}