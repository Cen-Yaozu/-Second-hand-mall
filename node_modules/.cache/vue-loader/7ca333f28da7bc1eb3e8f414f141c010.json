{"remainingRequest":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/-Second-hand-mall/src/components/common/userList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/macos/Desktop/-Second-hand-mall/src/components/common/userList.vue","mtime":1741743644073},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js","mtime":1741743640250},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js","mtime":1741743643788}],"contextDependencies":[],"result":["\n    export default {\n        name: \"userList\",\n        created() {\n            this.getUserData();\n        },\n        methods: {\n            handleCurrentChange(val) {\n                this.nowPage = val;\n                if(this.mode == 1){\n                    this.getUserData();\n                }\n                if(this.mode == 2){\n                    this.getBadUserData();\n                }\n                if(this.mode == 3){\n                    this.getUserManage();\n                }\n            },\n            handleSelect(val){\n                if(this.mode !== val){\n                    this.mode = val\n                    if(val == 1){\n                        this.nowPage = 1;\n                        this.getUserData();\n                    }\n                    if(val == 2){\n                        this.nowPage = 1;\n                        this.getBadUserData();\n                    }\n                    if(val == 3){\n                        this.nowPage = 1;\n                        this.getUserManage();\n                    }\n                }\n            },\n            getUserData(){\n                //正常普通用户\n                this.$api.getUserData({\n                    page: this.nowPage,\n                    nums:7,\n                    status:0\n                }).then(res => {\n                    if(res.status_code==1){\n                        this.userData = res.data.list;\n                        this.total = res.data.count;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e => {\n                    console.log(e)\n                })\n            },\n            getBadUserData(){\n                //违规用户\n                this.$api.getUserData({\n                    page: this.nowPage,\n                    nums:8,\n                    status:1\n                }).then(res => {\n                    if(res.status_code==1){\n                        this.badUserData = res.data.list;\n                        this.total = res.data.count;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e => {\n                    console.log(e)\n                });\n            },\n            getUserManage(){\n                //管理员\n                this.$api.getUserManage({\n                    page: this.nowPage,\n                    nums:8,\n                }).then(res => {\n                    if(res.status_code==1){\n                        this.userManage = res.data.list;\n                        this.total = res.data.count;\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e => {\n                    console.log(e)\n                })\n            },\n            confirmSeal(index) {\n                this.targetIndex = index;\n                this.dialogConfirmVisible = true;\n            },\n            sealUserConfirmed(index) {\n                // 执行封号操作\n                this.sealUser(index);\n                // 关闭确认弹窗\n                this.dialogConfirmVisible = false;\n            },\n            // 封号\n            sealUser(i){\n                console.log( this.userData[i].id);\n                this.$api.updateUserStatus({\n                    id: this.userData[i].id,\n                    status:1\n                }).then(res => {\n                    if(res.status_code==1){\n                        this.getUserData();\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e => {\n                    console.log(e)\n                })\n            },\n            unsealUser(i){\n                this.$api.updateUserStatus({\n                    id: this.badUserData[i].id,\n                    status:0\n                }).then(res => {\n                    if(res.status_code==1){\n                        this.getBadUserData();\n                    }else {\n                        this.$message.error(res.msg)\n                    }\n\n                }).catch(e => {\n                    console.log(e)\n                })\n            },\n            regAdmin(){\n                if(this.adminPassword == this.adminRePassword){\n                    this.$api.regAdministrator({\n                        adminName: this.adminName,\n                        accountNumber: this.adminAccount,\n                        adminPassword: this.adminPassword,\n                    }).then(res => {\n                        if(res.status_code==1){\n                            this.total = this.total+1;\n                            this.nowPage= Math.ceil(this.total/8);\n                            console.log(this.nowPage);\n                            this.getUserManage();\n                        }else {\n                            this.$message.error(res.msg)\n                        }\n                    }).catch(e => {\n                        console.log(e);\n                        this.$message.error(\"添加失败，账号重复或网络异常\")\n                    });\n                    this.adminRegVisible = false\n                }\n                else {\n                    this.$message.error(\"两次输入的密码不一致\");\n                }\n            },\n            searchIdle() {\n                this.$api.queryUser({\n                    searchValue: this.searchValue,\n                    mode: this.mode,\n                    page: this.nowPage,\n                    nums: 8,\n                }).then(res => {\n                    if (res.status_code == 1) {\n                        if(this.mode == 1){\n                            this.userData = res.data.list;\n                            this.total = res.data.count;\n                        }else if(this.mode == 2){\n                            this.badUserData = res.data.list;\n                            this.total = res.data.count;\n                        }else {\n                            this.userManage = res.data.list;\n                            this.total = res.data.count;\n                        }\n                    } else{\n                        this.$message.error(res.msg)\n                    }\n                }).catch(e => {\n                    console.log(e)\n                })\n            },\n            showUpdateModal(index) {\n                // 保存当前行的用户信息，并显示对话框\n                this.selectedUserIndex = index;\n                this.userForm = { ...this.userData[index] };\n                this.dialogVisible = true;\n            },\n            handleCancel() {\n                this.resetForm();\n                this.dialogVisible = false;\n            },\n            handleSave() {\n                // 验证并提交表单\n                if (this.$refs.userForm.validate()) {\n                    // 合并更新后的表单数据到原用户列表\n                    this.userData[this.selectedUserIndex] = { ...this.userForm };\n\n                    // 如果有需要，这里可以对接后台接口，将更新的数据发送到服务器\n                    this.$api.updateUser({\n                        id: this.userForm.id,\n                        nickname: this.userForm.nickname,\n                        password: this.userForm.userPassword,\n                    }).then(res => {\n                        if (res.status_code === 1) {\n                            this.$message.success('更新成功');\n                            this.dialogVisible = false;\n                            this.getUserData();\n                        }\n                    }).catch(e => {\n                        console.log(e)\n                    })\n                }\n            },\n            validatePassword(rule, value, callback) {\n                const allowedChars = /^[a-zA-Z0-9!\"#$%&'()*+,-./:;<=>?@[\\\\\\]^_`{|}~]+$/;\n                if (!allowedChars.test(value)) {\n                    callback(new Error('密码只能包含字母、数字以及常见的特殊字符'));\n                } else {\n                    callback();\n                }\n            },\n            resetForm() {\n                this.userForm = {};\n            },\n            handleDialogClose() {\n                // 对话框关闭时重置表单\n                this.resetForm();\n            },\n        },\n        data(){\n            return {\n                dialogConfirmVisible: false, // 控制确认弹窗的显示隐藏\n                targetIndex: null, // 记录即将封号的用户索引\n                userForm: {}, // 当前编辑的用户表单数据\n                dialogVisible: false, // 控制对话框是否显示\n                selectedUserIndex: null, // 当前选中用户的索引\n                mode:1,\n                nowPage: 1,\n                total: 63,\n                adminRegVisible: false,\n                adminAccount:'',\n                adminPassword:'',\n                adminRePassword:'',\n                adminName:'',\n                userData: [],\n                badUserData:[],\n                userManage:[],\n                searchValue: '',\n            }\n        },\n    }\n",null]}