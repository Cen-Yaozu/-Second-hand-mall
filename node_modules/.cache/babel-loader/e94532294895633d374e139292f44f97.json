{"remainingRequest":"/Users/macos/Desktop/-Second-hand-mall/node_modules/thread-loader/dist/cjs.js!/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/-Second-hand-mall/node_modules/element-ui/packages/progress/src/progress.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/element-ui/packages/progress/src/progress.vue","mtime":1741743641060},{"path":"/Users/macos/Desktop/-Second-hand-mall/babel.config.js","mtime":1741743639580},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/thread-loader/dist/cjs.js","mtime":1741743643599},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js","mtime":1741743640250},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js","mtime":1741743643788}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.number.constructor\";\nexport default {\n  name: 'ElProgress',\n  props: {\n    type: {\n      type: String,\n      default: 'line',\n      validator: function validator(val) {\n        return ['line', 'circle', 'dashboard'].indexOf(val) > -1;\n      }\n    },\n    percentage: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: function validator(val) {\n        return val >= 0 && val <= 100;\n      }\n    },\n    status: {\n      type: String,\n      validator: function validator(val) {\n        return ['success', 'exception', 'warning'].indexOf(val) > -1;\n      }\n    },\n    strokeWidth: {\n      type: Number,\n      default: 6\n    },\n    strokeLinecap: {\n      type: String,\n      default: 'round'\n    },\n    textInside: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: Number,\n      default: 126\n    },\n    showText: {\n      type: Boolean,\n      default: true\n    },\n    color: {\n      type: [String, Array, Function],\n      default: ''\n    },\n    defineBackColor: {\n      type: [String, Array, Function],\n      default: '#ebeef5'\n    },\n    textColor: {\n      type: [String, Array, Function],\n      default: '#606266'\n    },\n    format: Function\n  },\n  computed: {\n    barStyle: function barStyle() {\n      var style = {};\n      style.width = this.percentage + '%';\n      style.backgroundColor = this.getCurrentColor(this.percentage);\n      return style;\n    },\n    relativeStrokeWidth: function relativeStrokeWidth() {\n      return (this.strokeWidth / this.width * 100).toFixed(1);\n    },\n    radius: function radius() {\n      if (this.type === 'circle' || this.type === 'dashboard') {\n        return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);\n      } else {\n        return 0;\n      }\n    },\n    trackPath: function trackPath() {\n      var radius = this.radius;\n      var isDashboard = this.type === 'dashboard';\n      return \"\\n          M 50 50\\n          m 0 \".concat(isDashboard ? '' : '-').concat(radius, \"\\n          a \").concat(radius, \" \").concat(radius, \" 0 1 1 0 \").concat(isDashboard ? '-' : '').concat(radius * 2, \"\\n          a \").concat(radius, \" \").concat(radius, \" 0 1 1 0 \").concat(isDashboard ? '' : '-').concat(radius * 2, \"\\n          \");\n    },\n    perimeter: function perimeter() {\n      return 2 * Math.PI * this.radius;\n    },\n    rate: function rate() {\n      return this.type === 'dashboard' ? 0.75 : 1;\n    },\n    strokeDashoffset: function strokeDashoffset() {\n      var offset = -1 * this.perimeter * (1 - this.rate) / 2;\n      return \"\".concat(offset, \"px\");\n    },\n    trailPathStyle: function trailPathStyle() {\n      return {\n        strokeDasharray: \"\".concat(this.perimeter * this.rate, \"px, \").concat(this.perimeter, \"px\"),\n        strokeDashoffset: this.strokeDashoffset\n      };\n    },\n    circlePathStyle: function circlePathStyle() {\n      return {\n        strokeDasharray: \"\".concat(this.perimeter * this.rate * (this.percentage / 100), \"px, \").concat(this.perimeter, \"px\"),\n        strokeDashoffset: this.strokeDashoffset,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease'\n      };\n    },\n    stroke: function stroke() {\n      var ret;\n      if (this.color) {\n        ret = this.getCurrentColor(this.percentage);\n      } else {\n        switch (this.status) {\n          case 'success':\n            ret = '#13ce66';\n            break;\n          case 'exception':\n            ret = '#ff4949';\n            break;\n          case 'warning':\n            ret = '#e6a23c';\n            break;\n          default:\n            ret = '#20a0ff';\n        }\n      }\n      return ret;\n    },\n    iconClass: function iconClass() {\n      if (this.status === 'warning') {\n        return 'el-icon-warning';\n      }\n      if (this.type === 'line') {\n        return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-close';\n      } else {\n        return this.status === 'success' ? 'el-icon-check' : 'el-icon-close';\n      }\n    },\n    progressTextSize: function progressTextSize() {\n      return this.type === 'line' ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;\n    },\n    content: function content() {\n      if (typeof this.format === 'function') {\n        return this.format(this.percentage) || '';\n      } else {\n        return \"\".concat(this.percentage, \"%\");\n      }\n    }\n  },\n  methods: {\n    getCurrentColor: function getCurrentColor(percentage) {\n      if (typeof this.color === 'function') {\n        return this.color(percentage);\n      } else if (typeof this.color === 'string') {\n        return this.color;\n      } else {\n        return this.getLevelColor(percentage);\n      }\n    },\n    getLevelColor: function getLevelColor(percentage) {\n      var colorArray = this.getColorArray().sort(function (a, b) {\n        return a.percentage - b.percentage;\n      });\n      for (var i = 0; i < colorArray.length; i++) {\n        if (colorArray[i].percentage > percentage) {\n          return colorArray[i].color;\n        }\n      }\n      return colorArray[colorArray.length - 1].color;\n    },\n    getColorArray: function getColorArray() {\n      var color = this.color;\n      var span = 100 / color.length;\n      return color.map(function (seriesColor, index) {\n        if (typeof seriesColor === 'string') {\n          return {\n            color: seriesColor,\n            percentage: (index + 1) * span\n          };\n        }\n        return seriesColor;\n      });\n    }\n  }\n};",null]}