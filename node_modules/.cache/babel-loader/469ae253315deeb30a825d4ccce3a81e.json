{"remainingRequest":"/Users/macos/Desktop/-Second-hand-mall/node_modules/thread-loader/dist/cjs.js!/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/-Second-hand-mall/src/components/common/userList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/macos/Desktop/-Second-hand-mall/src/components/common/userList.vue","mtime":1741743644073},{"path":"/Users/macos/Desktop/-Second-hand-mall/babel.config.js","mtime":1741743639580},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/thread-loader/dist/cjs.js","mtime":1741743643599},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/babel-loader/lib/index.js","mtime":1741743640250},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/cache-loader/dist/cjs.js","mtime":1741743640345},{"path":"/Users/macos/Desktop/-Second-hand-mall/node_modules/vue-loader/lib/index.js","mtime":1741743643788}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/macos/Desktop/-Second-hand-mall/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport default {\n  name: \"userList\",\n  created: function created() {\n    this.getUserData();\n  },\n  methods: {\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.nowPage = val;\n      if (this.mode == 1) {\n        this.getUserData();\n      }\n      if (this.mode == 2) {\n        this.getBadUserData();\n      }\n      if (this.mode == 3) {\n        this.getUserManage();\n      }\n    },\n    handleSelect: function handleSelect(val) {\n      if (this.mode !== val) {\n        this.mode = val;\n        if (val == 1) {\n          this.nowPage = 1;\n          this.getUserData();\n        }\n        if (val == 2) {\n          this.nowPage = 1;\n          this.getBadUserData();\n        }\n        if (val == 3) {\n          this.nowPage = 1;\n          this.getUserManage();\n        }\n      }\n    },\n    getUserData: function getUserData() {\n      var _this = this;\n      //正常普通用户\n      this.$api.getUserData({\n        page: this.nowPage,\n        nums: 7,\n        status: 0\n      }).then(function (res) {\n        if (res.status_code == 1) {\n          _this.userData = res.data.list;\n          _this.total = res.data.count;\n        } else {\n          _this.$message.error(res.msg);\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    getBadUserData: function getBadUserData() {\n      var _this2 = this;\n      //违规用户\n      this.$api.getUserData({\n        page: this.nowPage,\n        nums: 8,\n        status: 1\n      }).then(function (res) {\n        if (res.status_code == 1) {\n          _this2.badUserData = res.data.list;\n          _this2.total = res.data.count;\n        } else {\n          _this2.$message.error(res.msg);\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    getUserManage: function getUserManage() {\n      var _this3 = this;\n      //管理员\n      this.$api.getUserManage({\n        page: this.nowPage,\n        nums: 8\n      }).then(function (res) {\n        if (res.status_code == 1) {\n          _this3.userManage = res.data.list;\n          _this3.total = res.data.count;\n        } else {\n          _this3.$message.error(res.msg);\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    confirmSeal: function confirmSeal(index) {\n      this.targetIndex = index;\n      this.dialogConfirmVisible = true;\n    },\n    sealUserConfirmed: function sealUserConfirmed(index) {\n      // 执行封号操作\n      this.sealUser(index);\n      // 关闭确认弹窗\n      this.dialogConfirmVisible = false;\n    },\n    // 封号\n    sealUser: function sealUser(i) {\n      var _this4 = this;\n      console.log(this.userData[i].id);\n      this.$api.updateUserStatus({\n        id: this.userData[i].id,\n        status: 1\n      }).then(function (res) {\n        if (res.status_code == 1) {\n          _this4.getUserData();\n        } else {\n          _this4.$message.error(res.msg);\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    unsealUser: function unsealUser(i) {\n      var _this5 = this;\n      this.$api.updateUserStatus({\n        id: this.badUserData[i].id,\n        status: 0\n      }).then(function (res) {\n        if (res.status_code == 1) {\n          _this5.getBadUserData();\n        } else {\n          _this5.$message.error(res.msg);\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    regAdmin: function regAdmin() {\n      var _this6 = this;\n      if (this.adminPassword == this.adminRePassword) {\n        this.$api.regAdministrator({\n          adminName: this.adminName,\n          accountNumber: this.adminAccount,\n          adminPassword: this.adminPassword\n        }).then(function (res) {\n          if (res.status_code == 1) {\n            _this6.total = _this6.total + 1;\n            _this6.nowPage = Math.ceil(_this6.total / 8);\n            console.log(_this6.nowPage);\n            _this6.getUserManage();\n          } else {\n            _this6.$message.error(res.msg);\n          }\n        }).catch(function (e) {\n          console.log(e);\n          _this6.$message.error(\"添加失败，账号重复或网络异常\");\n        });\n        this.adminRegVisible = false;\n      } else {\n        this.$message.error(\"两次输入的密码不一致\");\n      }\n    },\n    searchIdle: function searchIdle() {\n      var _this7 = this;\n      this.$api.queryUser({\n        searchValue: this.searchValue,\n        mode: this.mode,\n        page: this.nowPage,\n        nums: 8\n      }).then(function (res) {\n        if (res.status_code == 1) {\n          if (_this7.mode == 1) {\n            _this7.userData = res.data.list;\n            _this7.total = res.data.count;\n          } else if (_this7.mode == 2) {\n            _this7.badUserData = res.data.list;\n            _this7.total = res.data.count;\n          } else {\n            _this7.userManage = res.data.list;\n            _this7.total = res.data.count;\n          }\n        } else {\n          _this7.$message.error(res.msg);\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    showUpdateModal: function showUpdateModal(index) {\n      // 保存当前行的用户信息，并显示对话框\n      this.selectedUserIndex = index;\n      this.userForm = _objectSpread({}, this.userData[index]);\n      this.dialogVisible = true;\n    },\n    handleCancel: function handleCancel() {\n      this.resetForm();\n      this.dialogVisible = false;\n    },\n    handleSave: function handleSave() {\n      var _this8 = this;\n      // 验证并提交表单\n      if (this.$refs.userForm.validate()) {\n        // 合并更新后的表单数据到原用户列表\n        this.userData[this.selectedUserIndex] = _objectSpread({}, this.userForm);\n\n        // 如果有需要，这里可以对接后台接口，将更新的数据发送到服务器\n        this.$api.updateUser({\n          id: this.userForm.id,\n          nickname: this.userForm.nickname,\n          password: this.userForm.userPassword\n        }).then(function (res) {\n          if (res.status_code === 1) {\n            _this8.$message.success('更新成功');\n            _this8.dialogVisible = false;\n            _this8.getUserData();\n          }\n        }).catch(function (e) {\n          console.log(e);\n        });\n      }\n    },\n    validatePassword: function validatePassword(rule, value, callback) {\n      var allowedChars = /^[a-zA-Z0-9!\"#$%&'()*+,-./:;<=>?@[\\\\\\]^_`{|}~]+$/;\n      if (!allowedChars.test(value)) {\n        callback(new Error('密码只能包含字母、数字以及常见的特殊字符'));\n      } else {\n        callback();\n      }\n    },\n    resetForm: function resetForm() {\n      this.userForm = {};\n    },\n    handleDialogClose: function handleDialogClose() {\n      // 对话框关闭时重置表单\n      this.resetForm();\n    }\n  },\n  data: function data() {\n    return {\n      dialogConfirmVisible: false,\n      // 控制确认弹窗的显示隐藏\n      targetIndex: null,\n      // 记录即将封号的用户索引\n      userForm: {},\n      // 当前编辑的用户表单数据\n      dialogVisible: false,\n      // 控制对话框是否显示\n      selectedUserIndex: null,\n      // 当前选中用户的索引\n      mode: 1,\n      nowPage: 1,\n      total: 63,\n      adminRegVisible: false,\n      adminAccount: '',\n      adminPassword: '',\n      adminRePassword: '',\n      adminName: '',\n      userData: [],\n      badUserData: [],\n      userManage: [],\n      searchValue: ''\n    };\n  }\n};",null]}